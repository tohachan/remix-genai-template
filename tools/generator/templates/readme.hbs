# For Humans

## Overview
The {{pascalCase slice}} {{layer}} provides {{slice}}-related functionality with empty content for demonstration purposes.

## How to Run
1. Import the {{layer}} components:
   ```tsx
   import { {{#each publicApi}}{{#if @first}}{{this}}{{/if}}{{/each}} } from '~/{{layer}}/{{slice}}';
   ```

2. Use in your routes or components:
   ```tsx
   <{{#each publicApi}}{{#if @first}}{{this}}{{/if}}{{/each}} />
   ```

## How to Test
Run tests for this {{layer}}:
```bash
npm test -- {{layer}}/{{slice}}
```

Run all tests:
```bash
npm test
```

# For AI

<!-- AI_META -->
```json
{
  "purpose": "{{pascalCase slice}} {{layer}} with {{#if hasApi}}API backend interactions{{/if}}{{#if hasHooks}} React hooks{{/if}}{{#if hasUi}} UI components{{/if}} for {{slice}}-related functionality",
  "publicApi": [
    {{#each publicApiWithDescriptions}}
    "{{this}}"{{#unless @last}},{{/unless}}
    {{/each}}
  ],
  "dependencies": [
    {{#each dependencies}}
    "{{this}}"{{#unless @last}},{{/unless}}
    {{/each}}
  ],
  "tests": {
    "location": "app/{{layer}}/{{slice}}/**/*.spec.{ts,tsx}",
    "command": "npm test -- {{layer}}/{{slice}}"
  }
}
```

## Structure
```
app/{{layer}}/{{slice}}/
{{#if hasApi}}├── api.ts              # Backend interactions{{/if}}
{{#if structure.hasApiTests}}├── api.spec.ts         # API tests{{/if}}
{{#if hasHooks}}├── hooks.ts            # React hooks{{/if}}
{{#if structure.hasHooksTests}}├── hooks.spec.ts       # Hook tests{{/if}}
{{#if hasUi}}├── ui/                    # UI components{{/if}}
{{#each structure.uiComponents}}{{#if ../hasUi}}│   ├── {{this}}.tsx{{#if @first}}     # Main component{{else}}     # UI component{{/if}}{{/if}}
{{/each}}{{#if structure.hasTests}}│   └── *.spec.ts       # Component tests{{/if}}
├── index.ts            # Public exports
└── README.md           # This file
```

## TODO
- Add actual {{slice}} content when requirements are defined
- Implement specific {{slice}} functionality
- Add proper API endpoints
- Enhance UI components 