import * as React from 'react';
import { cn } from '~/shared/lib/utils';
import { Card } from '~/shared/ui/card';
import { Badge } from '~/shared/ui/badge';
import { Button } from '~/shared/ui/button';

interface {{componentName}}Props {
  className?: string;
}

interface ChartDataPoint {
  label: string;
  value: number;
  color: string;
}

interface {{pascalCase slice}}Stats {
  total: number;
  active: number;
  completed: number;
  pending: number;
}

const {{componentName}} = React.forwardRef<
  HTMLDivElement,
  {{componentName}}Props
>(({ className, ...props }, ref) => {
  const [data, setData] = React.useState<ChartDataPoint[]>([]);
  const [stats, setStats] = React.useState<{{pascalCase slice}}Stats>({
    total: 0,
    active: 0,
    completed: 0,
    pending: 0,
  });
  const [isLoading, setIsLoading] = React.useState(false);
  const [viewType, setViewType] = React.useState<'bar' | 'pie' | 'stats'>('stats');

  // Mock data generation - replace with actual API calls
  React.useEffect(() => {
    generateMockData();
  }, []);

  const generateMockData = () => {
    setIsLoading(true);
    
    // Mock chart data
    const mockData: ChartDataPoint[] = [
      { label: 'Active', value: 45, color: '#3b82f6' },
      { label: 'Completed', value: 30, color: '#10b981' },
      { label: 'Pending', value: 25, color: '#f59e0b' },
      { label: 'Cancelled', value: 12, color: '#ef4444' },
    ];
    
    const mockStats: {{pascalCase slice}}Stats = {
      total: 112,
      active: 45,
      completed: 30,
      pending: 25,
    };
    
    setData(mockData);
    setStats(mockStats);
    setIsLoading(false);
  };

  const maxValue = Math.max(...data.map(d => d.value));

  const renderBarChart = () => (
    <div className="space-y-3">
      {data.map((item, index) => (
        <div key={index} className="space-y-2">
          <div className="flex justify-between text-sm">
            <span className="font-medium">{item.label}</span>
            <span className="text-muted-foreground">{item.value}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div
              className="h-3 rounded-full transition-all duration-500"
              style={{
                width: `${(item.value / maxValue) * 100}%`,
                backgroundColor: item.color,
              }}
            />
          </div>
        </div>
      ))}
    </div>
  );

  const renderPieChart = () => {
    const total = data.reduce((sum, item) => sum + item.value, 0);
    let currentAngle = 0;

    return (
      <div className="flex items-center justify-center">
        <div className="relative w-48 h-48">
          <svg viewBox="0 0 100 100" className="w-full h-full">
            {data.map((item, index) => {
              const percentage = (item.value / total) * 100;
              const angle = (percentage / 100) * 360;
              const largeArcFlag = angle > 180 ? 1 : 0;
              
              const x1 = 50 + 45 * Math.cos((currentAngle * Math.PI) / 180);
              const y1 = 50 + 45 * Math.sin((currentAngle * Math.PI) / 180);
              const x2 = 50 + 45 * Math.cos(((currentAngle + angle) * Math.PI) / 180);
              const y2 = 50 + 45 * Math.sin(((currentAngle + angle) * Math.PI) / 180);
              
              const pathData = [
                `M 50 50`,
                `L ${x1} ${y1}`,
                `A 45 45 0 ${largeArcFlag} 1 ${x2} ${y2}`,
                'Z'
              ].join(' ');
              
              const result = (
                <path
                  key={index}
                  d={pathData}
                  fill={item.color}
                  stroke="white"
                  strokeWidth="0.5"
                />
              );
              
              currentAngle += angle;
              return result;
            })}
          </svg>
          
          {/* Legend */}
          <div className="absolute -right-24 top-0 space-y-2">
            {data.map((item, index) => (
              <div key={index} className="flex items-center gap-2 text-sm">
                <div
                  className="w-3 h-3 rounded"
                  style={{ backgroundColor: item.color }}
                />
                <span>{item.label}</span>
                <span className="text-muted-foreground">({item.value})</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  const renderStats = () => (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      <Card className="p-4 text-center">
        <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
        <div className="text-sm text-muted-foreground">Total {{pascalCase slice}}</div>
      </Card>
      <Card className="p-4 text-center">
        <div className="text-2xl font-bold text-green-600">{stats.active}</div>
        <div className="text-sm text-muted-foreground">Active</div>
      </Card>
      <Card className="p-4 text-center">
        <div className="text-2xl font-bold text-purple-600">{stats.completed}</div>
        <div className="text-sm text-muted-foreground">Completed</div>
      </Card>
      <Card className="p-4 text-center">
        <div className="text-2xl font-bold text-orange-600">{stats.pending}</div>
        <div className="text-sm text-muted-foreground">Pending</div>
      </Card>
    </div>
  );

  return (
    <div
      ref={ref}
      className={cn("space-y-6", className)}
      {...props}
    >
      {/* Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">{{pascalCase slice}} Analytics</h3>
        <div className="flex gap-2">
          <Button
            variant={viewType === 'stats' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewType('stats')}
          >
            Stats
          </Button>
          <Button
            variant={viewType === 'bar' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewType('bar')}
          >
            Bar Chart
          </Button>
          <Button
            variant={viewType === 'pie' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewType('pie')}
          >
            Pie Chart
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={generateMockData}
            disabled={isLoading}
          >
            Refresh
          </Button>
        </div>
      </div>

      {/* Chart Content */}
      <Card className="p-6">
        {isLoading ? (
          <div className="flex items-center justify-center h-48">
            <div className="text-muted-foreground">Loading chart data...</div>
          </div>
        ) : (
          <div>
            {viewType === 'stats' && renderStats()}
            {viewType === 'bar' && renderBarChart()}
            {viewType === 'pie' && renderPieChart()}
          </div>
        )}
      </Card>

      {/* Summary */}
      <Card className="p-4">
        <div className="flex items-center justify-between">
          <div>
            <Badge variant="outline" className="mr-2">
              Total: {stats.total}
            </Badge>
            <Badge variant="outline" className="mr-2">
              Active: {stats.active}
            </Badge>
            <Badge variant="outline">
              Completion Rate: {Math.round((stats.completed / stats.total) * 100)}%
            </Badge>
          </div>
          <div className="text-sm text-muted-foreground">
            Last updated: {new Date().toLocaleString()}
          </div>
        </div>
      </Card>
    </div>
  );
});

{{componentName}}.displayName = '{{componentName}}';

export { {{componentName}} }; 