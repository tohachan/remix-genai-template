import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
{{#if (eq layer 'pages')}}
import {{componentName}} from './index';
{{else if (eq layer 'features')}}
import { {{componentName}} } from './{{kebabCase slice}}.page';
{{else}}
import { {{componentName}} } from './{{componentName}}';
{{/if}}

{{#if (eq layer 'features')}}
// Mock the hooks for feature components
jest.mock('../hooks', () => ({
  // TODO: Add appropriate mocks for hooks when implementing business logic
}));
{{/if}}

{{#if (or (eq layer 'features') (eq layer 'pages'))}}
// Mock external dependencies if needed
// jest.mock('~/shared/lib/store', () => ({ store: {} }));
{{/if}}

describe('{{componentName}}', () => {
  it('renders without crashing', () => {
    {{#if (eq layer 'pages')}}
    render(<{{componentName}} />);
    {{else if (eq layer 'features')}}
    // TODO: Provide required props for feature component
    // render(<{{componentName}} requiredProp="value" />);
    expect(true).toBe(true); // Placeholder test - update with actual props
    {{else}}
    render(<{{componentName}} />);
    {{/if}}
    
    // TODO: Add assertions based on component's expected output
  });

  {{#unless (eq layer 'features')}}
  it('applies custom className when provided', () => {
    const customClass = 'custom-test-class';
    render(<{{componentName}} className={customClass} />);
    
    // TODO: Update selector based on actual component structure
    // const element = screen.getByRole('...');
    // expect(element).toHaveClass(customClass);
  });
  {{/unless}}

  {{#if (eq layer 'shared')}}
  it('forwards ref correctly', () => {
    const ref = React.createRef<HTMLDivElement>();
    render(<{{componentName}} ref={ref} />);
    
    expect(ref.current).toBeInTheDocument();
  });
  {{/if}}

  // TODO: Add component-specific tests based on functionality
  // Examples:
  // - User interactions (clicks, form submissions)
  // - Data loading states
  // - Error handling
  // - Props validation
}); 