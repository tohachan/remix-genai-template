import * as React from 'react';
import { cn } from '~/shared/lib/utils';
import { Card } from '~/shared/ui/card';
import { Button } from '~/shared/ui/button';
import { Input } from '~/shared/ui/input';
import { Badge } from '~/shared/ui/badge';

interface {{componentName}}Props {
  className?: string;
}

interface {{pascalCase slice}}Item {
  id: string;
  title: string;
  description?: string;
  status: 'todo' | 'in-progress' | 'done';
  priority: 'low' | 'medium' | 'high';
  assignee?: string;
  createdAt: string;
}

interface Column {
  id: string;
  title: string;
  status: {{pascalCase slice}}Item['status'];
  items: {{pascalCase slice}}Item[];
}

const {{componentName}} = React.forwardRef<
  HTMLDivElement,
  {{componentName}}Props
>(({ className, ...props }, ref) => {
  const [columns, setColumns] = React.useState<Column[]>([]);
  const [draggedItem, setDraggedItem] = React.useState<{{pascalCase slice}}Item | null>(null);
  const [newItemTitle, setNewItemTitle] = React.useState('');
  const [targetColumnId, setTargetColumnId] = React.useState<string>('');

  // Initialize columns and mock data
  React.useEffect(() => {
    const initialColumns: Column[] = [
      {
        id: 'todo',
        title: 'To Do',
        status: 'todo',
        items: [
          {
            id: '1',
            title: 'Sample {{pascalCase slice}} Task',
            description: 'This is a sample task in the todo column',
            status: 'todo',
            priority: 'medium',
            assignee: 'John Doe',
            createdAt: new Date().toISOString(),
          },
        ],
      },
      {
        id: 'in-progress',
        title: 'In Progress',
        status: 'in-progress',
        items: [
          {
            id: '2',
            title: 'Another {{pascalCase slice}} Task',
            description: 'This task is currently being worked on',
            status: 'in-progress',
            priority: 'high',
            assignee: 'Jane Smith',
            createdAt: new Date().toISOString(),
          },
        ],
      },
      {
        id: 'done',
        title: 'Done',
        status: 'done',
        items: [
          {
            id: '3',
            title: 'Completed {{pascalCase slice}} Task',
            description: 'This task has been completed',
            status: 'done',
            priority: 'low',
            assignee: 'Bob Wilson',
            createdAt: new Date().toISOString(),
          },
        ],
      },
    ];
    setColumns(initialColumns);
  }, []);

  const handleDragStart = (e: React.DragEvent, item: {{pascalCase slice}}Item) => {
    setDraggedItem(item);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDragEnter = (e: React.DragEvent, columnId: string) => {
    e.preventDefault();
    setTargetColumnId(columnId);
  };

  const handleDrop = (e: React.DragEvent, targetColumn: Column) => {
    e.preventDefault();
    
    if (!draggedItem) return;

    setColumns(prevColumns => {
      const newColumns = prevColumns.map(column => {
        // Remove item from source column
        if (column.items.some(item => item.id === draggedItem.id)) {
          return {
            ...column,
            items: column.items.filter(item => item.id !== draggedItem.id),
          };
        }
        
        // Add item to target column
        if (column.id === targetColumn.id) {
          const updatedItem = {
            ...draggedItem,
            status: targetColumn.status,
          };
          return {
            ...column,
            items: [...column.items, updatedItem],
          };
        }
        
        return column;
      });
      
      return newColumns;
    });

    setDraggedItem(null);
    setTargetColumnId('');
  };

  const handleAddItem = (columnId: string) => {
    if (!newItemTitle.trim()) return;

    const targetColumn = columns.find(col => col.id === columnId);
    if (!targetColumn) return;

    const newItem: {{pascalCase slice}}Item = {
      id: Date.now().toString(),
      title: newItemTitle,
      status: targetColumn.status,
      priority: 'medium',
      createdAt: new Date().toISOString(),
    };

    setColumns(prevColumns =>
      prevColumns.map(column =>
        column.id === columnId
          ? { ...column, items: [...column.items, newItem] }
          : column
      )
    );

    setNewItemTitle('');
  };

  const handleDeleteItem = (itemId: string) => {
    setColumns(prevColumns =>
      prevColumns.map(column => ({
        ...column,
        items: column.items.filter(item => item.id !== itemId),
      }))
    );
  };

  const getPriorityColor = (priority: {{pascalCase slice}}Item['priority']) => {
    switch (priority) {
      case 'high':
        return 'bg-red-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getPriorityBadgeVariant = (priority: {{pascalCase slice}}Item['priority']) => {
    switch (priority) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'default';
      case 'low':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  return (
    <div
      ref={ref}
      className={cn("p-6 space-y-6", className)}
      {...props}
    >
      {/* Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">{{pascalCase slice}} Kanban Board</h3>
        <div className="text-sm text-muted-foreground">
          Total Items: {columns.reduce((acc, col) => acc + col.items.length, 0)}
        </div>
      </div>

      {/* Kanban Board */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {columns.map((column) => (
          <div
            key={column.id}
            className={cn(
              "space-y-3 min-h-96 rounded-lg border-2 border-dashed border-gray-200 p-4",
              targetColumnId === column.id && "border-blue-400 bg-blue-50"
            )}
            onDragOver={handleDragOver}
            onDragEnter={(e) => handleDragEnter(e, column.id)}
            onDrop={(e) => handleDrop(e, column)}
          >
            {/* Column Header */}
            <div className="flex items-center justify-between">
              <h4 className="font-medium text-gray-700">{column.title}</h4>
              <Badge variant="secondary">{column.items.length}</Badge>
            </div>

            {/* Add Item */}
            <div className="space-y-2">
              <Input
                placeholder={`Add new ${column.title.toLowerCase()} item...`}
                value={newItemTitle}
                onChange={(e) => setNewItemTitle(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleAddItem(column.id);
                  }
                }}
              />
              <Button
                size="sm"
                variant="outline"
                className="w-full"
                onClick={() => handleAddItem(column.id)}
                disabled={!newItemTitle.trim()}
              >
                Add Item
              </Button>
            </div>

            {/* Items */}
            <div className="space-y-2">
              {column.items.map((item) => (
                <Card
                  key={item.id}
                  className={cn(
                    "p-3 cursor-move hover:shadow-md transition-shadow",
                    draggedItem?.id === item.id && "opacity-50"
                  )}
                  draggable
                  onDragStart={(e) => handleDragStart(e, item)}
                >
                  <div className="space-y-2">
                    {/* Item Header */}
                    <div className="flex items-start justify-between">
                      <h5 className="font-medium text-sm leading-tight">{item.title}</h5>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-6 w-6 p-0 text-gray-400 hover:text-red-500"
                        onClick={() => handleDeleteItem(item.id)}
                      >
                        Ã—
                      </Button>
                    </div>

                    {/* Description */}
                    {item.description && (
                      <p className="text-xs text-gray-600 line-clamp-2">
                        {item.description}
                      </p>
                    )}

                    {/* Priority and Assignee */}
                    <div className="flex items-center justify-between">
                      <Badge 
                        variant={getPriorityBadgeVariant(item.priority)}
                        className="text-xs"
                      >
                        {item.priority}
                      </Badge>
                      
                      {item.assignee && (
                        <div className="text-xs text-gray-500">
                          {item.assignee}
                        </div>
                      )}
                    </div>

                    {/* Created Date */}
                    <div className="text-xs text-gray-400">
                      {new Date(item.createdAt).toLocaleDateString()}
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Summary */}
      <Card className="p-4">
        <div className="grid grid-cols-3 gap-4 text-center">
          {columns.map((column) => (
            <div key={column.id}>
              <div className="text-lg font-semibold text-gray-700">
                {column.items.length}
              </div>
              <div className="text-sm text-gray-500">{column.title}</div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  );
});

{{componentName}}.displayName = '{{componentName}}';

export { {{componentName}} }; 