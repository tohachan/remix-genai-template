/**
 * {{componentName}} Feature API
 * Backend interactions and data fetching logic for {{slice}} feature
 */

import { baseApi } from '~/shared/lib/store/api';

// TODO: Move to entities/{{kebabCase slice}}/model/types.ts
export interface {{pascalCase slice}} {
  id: string;
  name: string;
}

// API Contract Definitions (Required by enforce-contracts rule)
// These interfaces define the request/response contracts for {{slice}} API endpoints

/**
 * Request contract for retrieving {{camelCase slice}} items with optional filtering
 */
export interface Get{{pascalCase slice}}Request {
  filter?: string;
  page?: number;
  limit?: number;
}

/**
 * Response contract for {{camelCase slice}} list endpoint
 */
export interface Get{{pascalCase slice}}Response {
  items: {{pascalCase slice}}[];
  total: number;
  page: number;
}

/**
 * Request contract for retrieving a single {{camelCase slice}} item
 */
export interface Get{{pascalCase slice}}ByIdRequest {
  id: string;
}

/**
 * Response contract for single {{camelCase slice}} endpoint
 */
export interface Get{{pascalCase slice}}ByIdResponse {
  item: {{pascalCase slice}};
}

/**
 * Request contract for creating a new {{camelCase slice}} item
 */
export interface Create{{pascalCase slice}}Request {
  // TODO: Define creation payload based on your {{camelCase slice}} entity
  name: string;
  description?: string;
}

/**
 * Response contract for {{camelCase slice}} creation endpoint
 */
export interface Create{{pascalCase slice}}Response {
  item: {{pascalCase slice}};
  success: boolean;
  message?: string;
}

/**
 * Request contract for updating an existing {{camelCase slice}} item
 */
export interface Update{{pascalCase slice}}Request {
  id: string;
  // TODO: Define update payload based on your {{camelCase slice}} entity
  name?: string;
  description?: string;
}

/**
 * Response contract for {{camelCase slice}} update endpoint
 */
export interface Update{{pascalCase slice}}Response {
  item: {{pascalCase slice}};
  success: boolean;
  message?: string;
}

/**
 * Request contract for deleting a {{camelCase slice}} item
 */
export interface Delete{{pascalCase slice}}Request {
  id: string;
}

/**
 * Response contract for {{camelCase slice}} deletion endpoint
 */
export type Delete{{pascalCase slice}}Response = void;

// RTK Query API endpoints
export const {{camelCase slice}}Api = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    get{{pascalCase slice}}Items: builder.query<Get{{pascalCase slice}}Response, Get{{pascalCase slice}}Request>({
      query: (params) => {
        const searchParams = new URLSearchParams();
        if (params.filter) searchParams.set('filter', params.filter);
        if (params.page) searchParams.set('page', params.page.toString());
        if (params.limit) searchParams.set('limit', params.limit.toString());
        
        const queryString = searchParams.toString();
        return `/{{kebabCase slice}}${queryString ? `?${queryString}` : ''}`;
      },
      providesTags: ['{{pascalCase slice}}'],
    }),

    get{{pascalCase slice}}ById: builder.query<Get{{pascalCase slice}}ByIdResponse, Get{{pascalCase slice}}ByIdRequest>({
      query: ({ id }) => `/{{kebabCase slice}}/${id}`,
      providesTags: (result, error, { id }) => [{ type: '{{pascalCase slice}}', id }],
    }),

    create{{pascalCase slice}}: builder.mutation<Create{{pascalCase slice}}Response, Create{{pascalCase slice}}Request>({
      query: (body) => ({
        url: '/{{kebabCase slice}}',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['{{pascalCase slice}}'],
    }),

    update{{pascalCase slice}}: builder.mutation<Update{{pascalCase slice}}Response, Update{{pascalCase slice}}Request>({
      query: ({ id, ...body }) => ({
        url: `/{{kebabCase slice}}/${id}`,
        method: 'PUT',
        body,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: '{{pascalCase slice}}', id }],
    }),

    delete{{pascalCase slice}}: builder.mutation<Delete{{pascalCase slice}}Response, Delete{{pascalCase slice}}Request>({
      query: ({ id }) => ({
        url: `/{{kebabCase slice}}/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: ['{{pascalCase slice}}'],
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useGet{{pascalCase slice}}ItemsQuery,
  useGet{{pascalCase slice}}ByIdQuery,
  useCreate{{pascalCase slice}}Mutation,
  useUpdate{{pascalCase slice}}Mutation,
  useDelete{{pascalCase slice}}Mutation,
} = {{camelCase slice}}Api;