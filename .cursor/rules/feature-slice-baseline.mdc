---
description: "Feature Slice Baseline Structure"
globs: []
alwaysApply: true
---

# Feature Slice Baseline Structure

This rule enforces that each feature slice under `app/features/` contains the required baseline files and directories.

## Required Structure

Each feature slice directory `app/features/<feature>/` **must** contain:

- `api.ts` — Backend interactions and data fetching logic
- `api.spec.ts` — Unit tests for API functions (next to api.ts)
- `hooks.ts` — React hooks specific to this feature  
- `hooks.spec.ts` — Unit tests for hooks (next to hooks.ts)
- `ui/` — UI components directory
- `ui/<feature>.page.tsx` — Main page component (where `<feature>` matches the directory name)
- `ui/<feature>.page.spec.ts` — Integration tests for page component (next to page.tsx)
- `README.md` — Feature documentation

## Enforcement Rules

When working in any feature slice directory (`app/features/<feature>/`):

1. **Check for missing baseline files** before making changes
2. **If any required files are missing**, immediately prompt:
   ```
   Create missing file <path> with template from scripts/templates/feature_README.md.
   ```
3. **Do not proceed** with feature development until baseline structure is complete

## Examples

**✅ Correct Feature Structure:**
```
app/features/auth/
├── api.ts
├── api.spec.ts
├── hooks.ts  
├── hooks.spec.ts
├── ui/
│   ├── LoginForm.tsx
│   ├── SignupForm.tsx
│   ├── auth.page.tsx
│   └── auth.page.spec.ts
└── README.md
```

**❌ Missing Required Files:**
```
app/features/profile/
├── hooks.ts
├── ui/
│   ├── ProfileCard.tsx
│   └── profile.page.tsx
# Missing: api.ts, api.spec.ts, hooks.spec.ts, ui/profile.page.spec.ts, README.md
```

In the incorrect example above, the rule should prompt:
- "Create missing file app/features/profile/api.ts with template from scripts/templates/feature_README.md."
- "Create missing file app/features/profile/api.spec.ts with template from scripts/templates/feature_README.md."
- "Create missing file app/features/profile/hooks.spec.ts with template from scripts/templates/feature_README.md."
- "Create missing file app/features/profile/ui/profile.page.spec.ts with template from scripts/templates/feature_README.md."
- "Create missing file app/features/profile/README.md with template from scripts/templates/feature_README.md."

## Feature Name Matching

- The `ui/<feature>.page.tsx` and related test files must use the exact directory name
- For feature directory `app/features/user-profile/`, the files should be:
  - `ui/user-profile.page.tsx`
  - `ui/user-profile.page.spec.ts`
  - `api.spec.ts`
  - `hooks.spec.ts`

## Integration with FSD

This rule works in conjunction with Feature-Sliced Design principles:
- Each feature represents a complete product feature
- All baseline files ensure consistent development patterns
- The `ui/` directory can contain multiple components following FSD segment conventions
