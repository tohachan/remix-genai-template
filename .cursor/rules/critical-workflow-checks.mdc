---
description:
globs:
alwaysApply: false
---
# Critical Workflow Checks

This rule defines mandatory checkpoints in the development workflow to prevent common mistakes and ensure adherence to project standards.

## ðŸ›‘ MANDATORY STOP POINTS

Before starting ANY development task, go through this checklist:

### 1. Planning Phase Check
- [ ] **Created execution plan** with step-by-step breakdown?
- [ ] **Identified all file types** that will be created?
- [ ] **Checked for available generators** for each file type?
- [ ] **Listed generator commands** in the execution plan?

### 2. File Creation Check
Before creating ANY file manually:
- [ ] **Checked if CLI generator exists** for this file type?
- [ ] **Attempted to use generator first** before manual creation?
- [ ] **Documented why manual creation** is necessary (if generator unavailable)?

### 3. Component Creation Check
Before writing `export default function ComponentName()`:
- [ ] **STOP immediately** - this should be generated
- [ ] **Run generator command** with full arguments
- [ ] **Verify generator created** all expected files
- [ ] **Only then customize** the generated content

## ðŸš¨ CRITICAL ERROR PREVENTION

### Red Flag Patterns - STOP IMMEDIATELY:
- Starting to write JSX component syntax manually
- Creating files in `ui/` directories by hand
- Writing test files without using generators
- Creating README.md files in features manually

### Recovery Actions:
1. **PAUSE current work**
2. **DELETE manually created files**
3. **RUN appropriate generator**
4. **CONTINUE with customization**

## ðŸ“‹ WORKFLOW INTEGRATION

### Pre-Task Checklist:
```
Before starting task execution:
1. âœ… Read all relevant README files
2. âœ… Create step-by-step execution plan  
3. âœ… Identify generator needs for each step
4. âœ… Verify available CLI commands
5. âœ… ONLY THEN begin implementation
```

### Step Execution Pattern:
```
For each step involving file creation:
1. âœ… Check: Is there a generator for this?
2. âœ… Use: Run generator with full arguments
3. âœ… Verify: All expected files were created
4. âœ… Customize: Modify generated content as needed
```

### Post-Step Verification:
```
After each step completion:
1. âœ… Files created using proper method (generator or justified manual)
2. âœ… All required files present (main, tests, exports)
3. âœ… No manual creation where generator was available
4. âœ… Documentation updated if needed
```

## ðŸŽ¯ SPECIFIC GENERATOR TRIGGERS

### Always Use Generators For:
- **React Components** (.tsx files) â†’ `npm run generate:component`
- **Feature README** files â†’ `npm run generate:readme`
- **Test files** (if generator exists) â†’ `npm run generate:test`
- **Storybook stories** â†’ Component generator with `--includeStorybook true`

### Manual Creation Only When:
- No generator exists for the file type
- Generator is broken or unavailable
- Explicitly documented why manual creation is necessary

## ðŸ”„ MISTAKE RECOVERY PROTOCOL

If you realize you've created files manually when generators were available:

### Immediate Actions:
1. **ACKNOWLEDGE the mistake** publicly
2. **STOP current development** 
3. **DELETE manually created files**
4. **RUN appropriate generators**
5. **MIGRATE content** to generated files
6. **CONTINUE with development**

### Learning Actions:
1. **IDENTIFY why** the mistake happened
2. **UPDATE workflow** to prevent recurrence
3. **STRENGTHEN checks** in execution planning
4. **IMPROVE rule clarity** if needed

## ðŸ’¡ CONTINUOUS IMPROVEMENT

### Regular Self-Assessment:
- Am I consistently using generators?
- Am I creating proper execution plans?
- Am I checking for available tools before manual work?
- Are there gaps in my workflow that lead to mistakes?

### Rule Evolution:
- Update this rule based on recurring mistakes
- Add new checkpoints as needed
- Strengthen enforcement mechanisms
- Improve clarity of instructions

## ðŸŽ¯ SUCCESS METRICS

You're following this rule correctly when:
- âœ… All components are created via CLI generators
- âœ… Execution plans include generator usage
- âœ… Manual file creation is rare and justified
- âœ… Workflow mistakes are caught early and corrected
- âœ… Development speed improves due to consistent patterns

This rule serves as a safety net to ensure consistent, high-quality development practices and prevent workflow mistakes that compromise project standards.
