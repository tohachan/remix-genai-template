---
description: 
globs: 
alwaysApply: false
---
# Critical Workflow Validation

This rule provides additional validation layers for development practices beyond specific generator rules. It focuses on general workflow compliance and quality assurance.

## üéØ WORKFLOW VALIDATION SCOPE

This rule validates adherence to:
- Generator usage (references `enforce-plop-generator.mdc`)
- File structure compliance 
- Quality standards maintenance
- Development best practices
- **FSD architecture boundaries**
- **Dependency injection patterns**

## üìã POST-STEP VERIFICATION

After each development step completion:

### File Creation Verification:
```
1. ‚úÖ Files created using proper method (generator or justified manual)
2. ‚úÖ All required files present (main, tests, exports)
3. ‚úÖ No manual creation where generator was available
4. ‚úÖ Documentation updated if needed
```

### Quality Assurance Verification:
```
1. ‚úÖ Code follows project standards
2. ‚úÖ Tests are included where required
3. ‚úÖ Documentation is updated
4. ‚úÖ FSD architecture compliance maintained
```

### üö® MANDATORY ARCHITECTURE VALIDATION:
```
5. ‚úÖ FSD layer boundary violations check: npm run lint [target-files]
6. ‚úÖ Dependency injection violations check: npm run lint [target-files]
7. ‚úÖ Zero tolerance: ALL FSD/DI errors must be fixed immediately
8. ‚úÖ Cross-layer import validation completed
```

## üîç COMPLIANCE MONITORING

### Generator Compliance Check:
- Verify components created via CLI generators (see `enforce-plop-generator.mdc`)
- Confirm proper file structure and naming
- Validate test coverage requirements

### Architecture Compliance Check:
- FSD layer boundaries respected
- Import rules followed
- Proper segment usage
- **üö® CRITICAL: Check for widget‚Üífeature imports**
- **üö® CRITICAL: Check for direct service/hook imports**

### üö® ARCHITECTURAL VIOLATION DETECTION

When ESLint detects these errors, **IMMEDIATELY STOP** and fix:

#### Common FSD Violations:
- `fsd/no-direct-service-imports` - Widgets importing from features
- `enforce-fsd-layer-boundaries` - Invalid layer imports
- Direct API imports in UI components
- Cross-slice imports within same layer

#### Common DI Violations:
- Hook imports directly from feature layers
- Service imports without dependency injection
- Client imports in components

#### Emergency Response Protocol:
```
üö® ARCHITECTURAL VIOLATION DETECTED:
1. STOP current development immediately
2. ANALYZE the violation and root cause
3. REFACTOR to follow proper FSD/DI patterns
4. VALIDATE fix doesn't introduce new violations
5. DOCUMENT the architectural decision
6. ONLY THEN continue with development
```

## üí° IMPROVEMENT TRACKING

### Regular Self-Assessment Questions:
- Am I consistently following project standards?
- Are there recurring issues in my workflow?
- What improvements can be made to prevent mistakes?
- **Am I catching FSD/DI violations early?**
- **Do I understand the layer hierarchy correctly?**

### Quality Metrics:
- Reduced manual file creation incidents
- Improved generator adoption rates
- Better adherence to architectural patterns
- Faster development cycles with fewer errors
- **Zero FSD/DI violations in completed code**
- **Improved architectural awareness**

## üö® SYSTEMATIC ERROR PREVENTION

### Before ANY File Creation:
1. **Check generators first** - reference `enforce-plop-generator.mdc`
2. **Understand FSD layer** where file belongs
3. **Plan import dependencies** to avoid violations
4. **Validate architecture** before implementation

### Enhanced Validation Sequence:
```
1. npm run lint:fix (auto-fix common issues)
2. npm run type-check (zero tolerance for type errors)
3. npm run lint [target-files] (MANDATORY FSD/DI check)
4. Fix ALL architectural violations immediately
5. npm run test (functionality verification)
6. Manual testing of features
```

### Root Cause Analysis Requirement:
When violations occur, **always ask**:
- Why did this violation happen?
- What was the thought process that led to it?
- How can the workflow prevent this in the future?
- What gaps exist in the current validation?

## üéØ INTEGRATION WITH OTHER RULES

This rule works as a validation layer for:
- `enforce-plop-generator.mdc` - Generator usage enforcement
- `enforce-project-structure.mdc` - FSD compliance
- `feature-slice-baseline.mdc` - Feature requirements
- `require-pure-function-tests.mdc` - Testing standards
- **Enhanced ESLint rules** - Automated FSD/DI violation detection

## üîÑ CONTINUOUS LEARNING

### From Violations to Improvements:
- Each architectural violation is a learning opportunity
- Update workflow based on recurring issues
- Strengthen automation to catch violations earlier
- Improve rule clarity based on common mistakes

### Success Indicators:
- ‚úÖ Consistent use of generators for all supported file types
- ‚úÖ Zero FSD layer boundary violations
- ‚úÖ Zero dependency injection violations
- ‚úÖ Improved development speed through better practices
- ‚úÖ Reduced time spent fixing architectural issues

This rule serves as a comprehensive quality gate to ensure consistent, architecturally-sound development practices across all project work.

[Cursor Rule] Applying critical-workflow-checks.mdc ‚Äî Workflow validation
