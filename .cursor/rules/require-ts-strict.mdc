---
description: "TypeScript Strict Mode Requirements"
globs: []
alwaysApply: true
---

# TypeScript Strict Mode Requirements

This rule ensures that TypeScript strict mode and related compiler options are properly configured in `tsconfig.json` to maintain code quality and type safety.

## Required Compiler Options

The `tsconfig.json` file **must** include these strict mode settings:

### Core Strict Mode
- `"strict": true` — Enable all strict type checking options

### Individual Strict Options (automatically enabled by strict: true)
When `"strict": true` is set, these options are automatically enabled, but they can be explicitly set for clarity or selectively disabled if needed:

- `"noImplicitAny": true` — Error on expressions with implied 'any' type
- `"strictNullChecks": true` — Enable strict null checks  
- `"strictFunctionTypes": true` — Enable strict checking of function types
- `"strictBindCallApply": true` — Enable strict 'bind', 'call', and 'apply' methods
- `"strictPropertyInitialization": true` — Enable strict checking of property initialization
- `"noImplicitReturns": true` — Error when not all code paths return a value
- `"noImplicitThis": true` — Error on 'this' expressions with implied 'any' type

### Additional Recommended Options
- `"noUncheckedIndexedAccess": true` — Add undefined to index signature results
- `"exactOptionalPropertyTypes": true` — Interpret optional property types as written
- `"noImplicitOverride": true` — Ensure overriding members are marked with 'override'

## Configuration Examples

**✅ Minimal Required Configuration:**
```json
{
  "compilerOptions": {
    "strict": true,
    // ... other options
  }
}
```

**✅ Explicit Configuration:**
```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitOverride": true,
    // ... other options
  }
}
```

## Enforcement Rules

1. **Always verify** that `"strict": true` is present in `compilerOptions`
2. **If strict mode is missing**, immediately prompt to update `tsconfig.json`
3. **Check for conflicting settings** — ensure no strict options are explicitly set to `false` when `strict: true` is enabled
4. **Validate inheritance** — if using extended configurations, ensure parent configs don't disable strict mode

## Error Resolution

If `tsconfig.json` is missing strict mode configuration:

1. **Add `"strict": true`** to the `compilerOptions` object
2. **Review existing code** for type errors that may surface
3. **Update code** to fix newly detected type issues
4. **Consider gradual adoption** by temporarily setting specific strict options to false, then enabling them incrementally

## Project-Specific Notes

- This rule applies to all TypeScript configuration files (`tsconfig.json`, `tsconfig.*.json`)
- Strict mode helps catch potential runtime errors at compile time
- All new TypeScript code should be written with strict mode in mind
- Legacy code should be gradually updated to comply with strict mode requirements
