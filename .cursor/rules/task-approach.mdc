---
description: "General task approach methodology for systematic request handling"
globs: []
alwaysApply: true
---
# General Task Approach Rule

This rule defines the systematic approach for handling user requests to ensure clarity, thoroughness, and focused execution.

## File Clarification Requirement

### Always Clarify File References
When a user mentions files or components without explicit paths or clear identification:

**‚ùå Never assume** which files the user is referring to
**‚úÖ Always ask for clarification** using this pattern:

```
I need to clarify which files you're referring to. Are you talking about:
- [List specific file paths/options you think they might mean]
- Or different files entirely?

Please specify the exact file paths or provide more context.
```

### Examples of Required Clarification

**User says**: "Update the login component"
**Required response**: 
```
I need to clarify which login component you're referring to. Are you talking about:
- app/features/auth/ui/LoginForm.tsx
- app/shared/ui/LoginModal.tsx
- Or a different login component?
```

**User says**: "Fix the API call"
**Required response**:
```
I need to clarify which API call you're referring to. Are you talking about:
- app/features/auth/api.ts
- app/entities/user/api/requests.ts
- Or a different API file?
```

## README Analysis Requirement

### Mandatory README Study
Before making any changes to features or components, **always** read relevant README files:

#### Initial Entity Analysis
At the start of any task, identify and read README files for:
- Feature slices mentioned in the request
- Widget slices involved
- Entity slices referenced
- Any specific components or utilities mentioned

#### Progressive Entity Discovery
As you work through the task and discover new entities that need to be used or modified:
- **Immediately read** the README for each newly discovered entity
- **Before** making any changes to the entity
- **Update your understanding** based on the README content

#### README Location Patterns
Look for README files in these locations:
- `app/features/{feature}/README.md`
- `app/widgets/{widget}/README.md`
- `app/entities/{entity}/README.md`
- `app/pages/{page}/README.md`

### README Analysis Actions
When reading README files:
1. **Extract key information** about purpose, public API, dependencies
2. **Note any specific usage patterns** or constraints
3. **Identify testing requirements** and locations
4. **Understand integration points** with other parts of the system

## Strict Scope Adherence

### Do Only What's Requested
**‚ùå Never add improvements** or enhancements not explicitly requested
**‚ùå Never suggest additional features** unless directly asked
**‚ùå Never optimize code** unless optimization is the specific request
**‚úÖ Implement exactly** what the user asked for
**‚úÖ Stay focused** on the specific requirements

### Examples of Scope Violations

**‚ùå User asks**: "Add a submit button"
**‚ùå Wrong response**: "I'll add the submit button and also improve the form validation and add loading states"

**‚úÖ User asks**: "Add a submit button"  
**‚úÖ Correct response**: "I'll add the submit button as requested"

## File Editing and Search-Replace Error Handling

### Proper Response to "String Not Found" Errors

When `search_replace` fails with "string not found" errors, follow this systematic approach:

#### First Attempt Failed
If the first `search_replace` attempt fails:
1. **Re-read the file** around the target area to verify exact formatting
2. **Check for whitespace differences** - extra spaces, tabs, or line endings
3. **Try a smaller, more specific string** that you're certain exists
4. **Consider that the string may have already been changed** in a previous edit

#### Multiple Failures (2-3 attempts)
If multiple `search_replace` attempts fail:
1. **Re-examine your target string** - it likely doesn't exist as written
2. **Use `grep_search`** to find the actual text pattern in the file
3. **Read the specific file section** to see the current state
4. **Adjust your search string** based on what actually exists

#### What NOT to Do

**‚ùå Never resort to complex workarounds** after `search_replace` failures:
- Do NOT use `sed` commands for text replacement
- Do NOT attempt line-by-line file reconstruction
- Do NOT use terminal commands to edit files character by character
- Do NOT over-analyze with excessive `read_file` calls

#### Correct Escalation Process

If `search_replace` consistently fails after 2-3 reasonable attempts:

1. **Acknowledge the limitation**:
```
I'm having trouble with the exact text replacement. The search string doesn't seem to match the file content exactly.
```

2. **Provide the exact replacement needed**:
```
Please manually replace this line:
[exact current text]

With:
[exact new text]
```

3. **If needed, suggest using edit_file for larger changes**:
```
Alternatively, I can use edit_file to rewrite the entire section if you prefer.
```

#### Examples of Correct Behavior

**‚úÖ Good approach after search_replace fails:**
```
The search_replace failed to find the exact string. Let me read the file to see the current content.
[reads file]
I can see the actual text is slightly different. Let me try with the correct string.
[attempts corrected search_replace]
```

**‚ùå Bad approach after search_replace fails:**
```
Let me use sed to replace this line by line...
[starts complex terminal manipulation]
Actually, let me read each line individually to find the exact position...
[over-complicates simple task]
```

### Benefits of This Approach

- **Efficiency**: Avoids time-consuming workarounds for simple tasks
- **Simplicity**: Keeps text replacement straightforward
- **Reliability**: Reduces errors from complex command chains
- **Clarity**: Makes the editing process transparent to users
- **Speed**: Resolves text replacement issues quickly

## Conflict Resolution Requirement

### Always Report Inconsistencies
When you encounter conflicts or inconsistencies:

#### In Requirements
- Conflicting instructions within the same request
- Ambiguous or contradictory specifications
- Missing critical information

#### In Rules/Standards
- Conflicts between different coding rules
- Conflicts between different cursor rules
- Inconsistencies with FSD architecture
- Violations of established patterns

#### Required Response Pattern
```
I've identified an inconsistency/conflict:

**Issue**: [Describe the specific conflict or inconsistency]
**Details**: [Explain what's conflicting and why it's problematic]
**Options**: [List possible approaches to resolve it]

How would you like me to proceed?
```

## Step-by-Step Execution

### Always Create Execution Plan
For every task, create a clear step-by-step plan:

#### Simple Tasks (1-3 steps)
Present the plan directly in the response with generator checks:
```
**Execution Plan:**
1. [Step 1 description] 
   - Check generators: [List applicable generators for this step]
2. [Step 2 description]
   - Generator needed: [Yes/No - specify which one]
3. [Step 3 description]
   - Manual file creation: [Only if no generator available]

I'll now proceed with these steps using CLI generators where applicable.
```

#### Complex Tasks (4+ steps)
Create a temporary tracking file:

**File name pattern**: `task-steps-{taskId}.md` (where taskId is a short descriptive identifier)
**Location**: Project root directory
**Content structure**:
```markdown
# Task: [Brief task description]

## Steps:
- [ ] Step 1: [Description] 
  - Generator check: [CLI generator needed? Which one?]
- [ ] Step 2: [Description]
  - Generator check: [CLI generator needed? Which one?]
- [ ] Step 3: [Description]
  - Generator check: [CLI generator needed? Which one?]
- [ ] Step 4: [Description]
  - Generator check: [CLI generator needed? Which one?]
...

## Generator Commands Used:
- Step X: npm run generate:component -- ComponentName --layer features --slice auth --includeTests true --includeStorybook false
- Step Y: npm run generate:readme slice-name

## Progress Notes:
[Update as you work through steps]

## Completed:
[Move completed steps here]
```

### Step Execution Process with Generator Checks

1. **Create or present** the execution plan
2. **For each step involving file creation:**
   - **FIRST** check if CLI generator exists for the file type
   - **USE** CLI generator if available (components, README, tests)
   - **ONLY** proceed with manual creation if no generator exists
3. **Follow steps sequentially** - complete one before moving to the next
4. **For complex tasks**: Update the tracking file after each step completion
5. **Stay focused** on current step, don't jump ahead
6. **For complex tasks**: Delete the tracking file when task is complete

### üö® GENERATOR CHECK REQUIREMENTS

**Before ANY file creation step:**
- Reference `enforce-plop-generator.mdc` for detailed generator requirements
- Use CLI generators for all supported file types
- Only proceed with manual creation if no generator exists

**Generator-First Reference:**
- See `enforce-plop-generator.mdc` for complete generator usage guidelines

### Step Update Pattern
When updating the tracking file:
```markdown
## Progress Notes:
- Completed Step 1: [Brief description of what was done]
- Working on Step 2: [Current progress]

## Completed:
- [x] Step 1: [Description]
```

## Integration with Existing Rules

This rule works in conjunction with:
- FSD architecture requirements
- File structure conventions  
- Testing requirements
- Code quality standards

**Priority**: When this rule conflicts with other rules, clarify with the user which approach to take.

## Benefits

Following this approach ensures:
- **Clarity**: No assumptions about file references
- **Thoroughness**: Complete understanding of affected components
- **Focus**: Strict adherence to requested scope
- **Quality**: Systematic conflict resolution
- **Trackability**: Clear execution progress for complex tasks
- **Completeness**: Nothing is forgotten or overlooked