---
description: 
globs: app/**/*.tsx, app/**/*.jsx
alwaysApply: false
---
# Dependency Injection Pattern for Service Singletons

This rule enforces proper dependency injection patterns in React components by flagging direct imports of service singletons and suggesting the use of DI providers or React context hooks instead.

## Detection Patterns

This rule detects and flags direct imports of service instances using these patterns:

### Service Import Patterns
```regex
/^import\s+(\w+)\s+from\s+['"].*[Ss]ervice(s)?['"];?$/m
/^import\s+\{\s*(\w*[Ss]ervice\w*)\s*\}\s+from/m
/^import\s+(\w*[Cc]lient\w*)\s+from/m  
/^import\s+\{\s*(\w*[Cc]lient\w*)\s*\}\s+from/m
/^import\s+(\w*[Ss]tore\w*)\s+from/m
/^import\s+\{\s*(\w*[Ss]tore\w*)\s*\}\s+from/m
/\.create\(/m
```

### Flagged Import Examples
- `import apiClient from 'shared/services/apiClient'`
- `import { authService } from 'shared/services/auth'`
- `import { userStore } from 'features/user'`
- `import httpClient from 'shared/api/httpClient'`
- `import notificationService from 'services/notifications'`
- `axios.create()` calls in component files

## Error Messages

When violations are detected, provide specific guidance:

**For Service Imports:**
```
❌ Avoid importing service instances directly: import {serviceName}
✅ Use the corresponding hook instead: const service = use{ServiceName}()
```

**For API Client Imports:**
```
❌ Avoid importing API clients directly: import {clientName}
✅ Use dependency injection: const client = useApiClient() or inject via context/props
```

**For Store Imports:**
```
❌ Avoid importing store instances directly: import {storeName}
✅ Use React context or custom hooks: const store = use{StoreName}()
```

## Code Examples

### ❌ Bad: Direct Service Imports
```tsx
// ❌ BAD - Direct service imports
import { authService } from 'shared/services/authService';
import apiClient from 'shared/services/apiClient';
import { userStore } from 'features/user';
import axios from 'axios';

function UserProfile() {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // Direct service usage - tightly coupled
    authService.getCurrentUser().then(setUser);
  }, []);
  
  const handleUpdate = async (data) => {
    // Direct API client usage
    await apiClient.patch('/user', data);
    userStore.updateUser(data);
  };
  
  return <div>{user?.name}</div>;
}
```

### ✅ Good: Dependency Injection
```tsx
// ✅ GOOD - Using dependency injection hooks
import { useAuthService } from 'shared/lib/di/useAuthService';
import { useApiClient } from 'shared/lib/di/useApiClient';
import { useUserStore } from 'features/user/lib/useUserStore';

function UserProfile() {
  const [user, setUser] = useState(null);
  const authService = useAuthService();
  const apiClient = useApiClient();
  const userStore = useUserStore();
  
  useEffect(() => {
    // Injected service usage - loosely coupled
    authService.getCurrentUser().then(setUser);
  }, [authService]);
  
  const handleUpdate = async (data) => {
    // Injected API client usage
    await apiClient.patch('/user', data);
    userStore.updateUser(data);
  };
  
  return <div>{user?.name}</div>;
}
```

## Dependency Injection Implementation Patterns

### 1. React Context Hook Pattern
```tsx
// services/AuthServiceContext.tsx
const AuthServiceContext = createContext<AuthService | null>(null);

export const useAuthService = (): AuthService => {
  const service = useContext(AuthServiceContext);
  if (!service) {
    throw new Error('useAuthService must be used within AuthServiceProvider');
  }
  return service;
};

export const AuthServiceProvider = ({ children }: { children: ReactNode }) => {
  const authService = useMemo(() => new AuthService(), []);
  return (
    <AuthServiceContext.Provider value={authService}>
      {children}
    </AuthServiceContext.Provider>
  );
};
```

### 2. Custom Hook with DI Container
```tsx
// shared/lib/di/useServices.ts
import { container } from './container';

export const useAuthService = () => {
  return container.get<AuthService>('AuthService');
};

export const useApiClient = () => {
  return container.get<ApiClient>('ApiClient');
};
```

### 3. Props-Based Injection
```tsx
interface UserProfileProps {
  authService?: AuthService;
  apiClient?: ApiClient;
}

function UserProfile({ 
  authService = defaultAuthService,
  apiClient = defaultApiClient 
}: UserProfileProps) {
  // Use injected dependencies
}
```

## Allowed Import Patterns

These imports are **not** flagged by this rule:

### Type-Only Imports
```tsx
import type { AuthService, User } from '~/entities/user/model/types';
import type { ApiResponse } from '~/shared/api/types';
```

### Configuration and Constants
```tsx
import { API_ENDPOINTS } from '~/shared/config/api';
import { APP_CONFIG } from '~/shared/config/app';
```

### Pure Utility Functions
```tsx
import { formatDate, parseQuery } from '~/shared/lib/utils';
import { validateEmail } from '~/shared/lib/validation';
```

### React and UI Components
```tsx
import { useState, useEffect, useContext } from 'react';
import { Button } from '~/shared/ui/Button';
import { Modal } from '~/shared/ui/Modal';
```

## Benefits of Dependency Injection

Following this pattern provides:

- **Enhanced Testability**: Easy to mock services in unit tests
- **Runtime Flexibility**: Switch implementations without code changes
- **Loose Coupling**: Components depend on abstractions, not concrete classes
- **Better Separation of Concerns**: Clear boundaries between UI and business logic
- **Improved Maintainability**: Centralized service management and easier refactoring

## Integration with FSD Architecture

This rule supports Feature-Sliced Design by:
- Enforcing proper dependency management across FSD layers
- Supporting clean boundaries between features and shared services
- Enabling better testing strategies within the FSD structure
- Maintaining consistency in service usage patterns

## File Scope

This rule applies to:
- React component files (`.tsx`, `.jsx`) 
- Files in `app/` directory following FSD architecture
- UI components across all FSD layers (shared, entities, features, widgets, pages)

**Excludes:**
- Service implementation files themselves
- DI container setup files
- Configuration files
- Test files (`.spec.ts`, `.test.ts`)

[Cursor Rule] Applying require-di-pattern.mdc — Dependency Injection enforcement
