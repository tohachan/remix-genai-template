---
description: "Enforce CLI component generator usage for all component creation"
globs: ["**/*.tsx", "**/*.jsx", "**/ui/**"]
alwaysApply: true
---

# Enforce CLI Component Generator Usage for Component Creation

This rule mandates the use of the CLI component generator with full arguments for creating all new React components in the project to ensure consistency, proper structure, and adherence to FSD architecture.

## üõë MANDATORY STOP POINTS - CRITICAL WORKFLOW CHECKS

**BEFORE creating ANY file, ALWAYS go through this checklist:**

### 1. Planning Phase Check
- [ ] **Created execution plan** with step-by-step breakdown?
- [ ] **Identified all file types** that will be created?
- [ ] **Checked for available generators** for each file type?
- [ ] **Listed generator commands** in the execution plan?

### 2. File Creation Check (MOST CRITICAL)
Before creating ANY file manually:
- [ ] **Checked if CLI generator exists** for this file type?
- [ ] **Attempted to use generator first** before manual creation?
- [ ] **Documented why manual creation** is necessary (if generator unavailable)?

### 3. Component Creation Check
Before writing `export default function ComponentName()`:
- [ ] **STOP immediately** - this should be generated
- [ ] **Run generator command** with full arguments
- [ ] **Verify generator created** all expected files
- [ ] **Only then customize** the generated content

## üö® CRITICAL ERROR PREVENTION

### Red Flag Patterns - STOP IMMEDIATELY:
- Starting to write JSX component syntax manually
- Creating files in `ui/` directories by hand
- Writing test files without using generators
- Creating README.md files in features manually
- Writing `export default function ComponentName()` from scratch

### Recovery Actions:
1. **PAUSE current work**
2. **DELETE manually created files**
3. **RUN appropriate generator**  
4. **CONTINUE with customization**

### üîÑ MISTAKE RECOVERY PROTOCOL

If you realize you've created files manually when generators were available:

#### Immediate Actions:
1. **ACKNOWLEDGE the mistake** publicly
2. **STOP current development** 
3. **DELETE manually created files**
4. **RUN appropriate generators**
5. **MIGRATE content** to generated files
6. **CONTINUE with development**

## üìã WORKFLOW INTEGRATION

### Pre-Task Checklist:
```
Before starting task execution:
1. ‚úÖ Read all relevant README files
2. ‚úÖ Create step-by-step execution plan  
3. ‚úÖ Identify generator needs for each step
4. ‚úÖ Verify available CLI commands
5. ‚úÖ ONLY THEN begin implementation
```

### Step Execution Pattern:
```
For each step involving file creation:
1. ‚úÖ Check: Is there a generator for this?
2. ‚úÖ Use: Run generator with full arguments
3. ‚úÖ Verify: All expected files were created
4. ‚úÖ Customize: Modify generated content as needed
```

### üö® GENERATOR CHECK REQUIREMENTS

**Before ANY file creation step, ask:**
- Is this a component (.tsx) file? ‚Üí Use `npm run generate:component`
- Is this a README.md in a feature? ‚Üí Use `npm run generate:readme`
- Is this a test file? ‚Üí Check if `npm run generate:test` exists
- Is this another file type? ‚Üí Check available generators first

**Generator-First Step Pattern:**
```
Step X: Create ComponentName component
  X.1: Check CLI generator: npm run generate:component --help
  X.2: Run generator: npm run generate:component -- ComponentName --layer features --slice auth --includeTests true --includeStorybook false
  X.3: Customize generated content as needed
```

## Required Generator Usage

### Mandatory Generator Command
All new components **must** be created using the component generator in CLI mode with full arguments:

```bash
# CLI mode with FULL arguments (REQUIRED approach)
npm run generate:component -- ComponentName --layer <layer> --includeTests <true|false> --includeStorybook <true|false>

# Examples with full arguments:
npm run generate:component -- Button --layer shared --includeTests true --includeStorybook false
npm run generate:component -- LoginForm --layer features --slice auth --includeTests true --includeStorybook false
npm run generate:component -- UserCard --layer widgets --slice profile --includeStorybook true --includeTests true

# Show help with all options
npm run generate:component -- --help
```

**‚ùå Manual component creation is STRICTLY PROHIBITED** - Never create component files manually.
**‚ùå Interactive mode is FORBIDDEN** - Always use CLI mode with full arguments to avoid prompts.
**‚ùå Partial arguments are FORBIDDEN** - Always specify ALL arguments including defaults.

### üõë IMMEDIATE ACTIONS when manual creation is detected:
1. **STOP work immediately**
2. **DELETE manually created files**
3. **Run CLI generator with full arguments**
4. **ONLY THEN continue with customization**

## Enforcement Scope

This rule applies to all component files in:
- `**/ui/**/*.tsx` - React component files
- `**/ui/**/*.ts` - TypeScript utility files in UI segments
- All FSD layers: `shared`, `entities`, `features`, `widgets`, `pages`

**Special Note for Pages Layer:**
- Page components should use `ui/index.tsx` pattern (not `ui/[page].page.tsx`)
- Generator creates proper structure following existing project patterns

## Required Generator-Created Structure

When creating components, the generator must produce:

### Component Files
```
[layer]/[slice?]/ui/
‚îú‚îÄ‚îÄ ComponentName.tsx        # Main component (generated)
‚îú‚îÄ‚îÄ ComponentName.spec.tsx   # Tests (generated)
‚îî‚îÄ‚îÄ ComponentName.stories.tsx # Storybook (optional, generated)
```

### Index Files
```
[layer]/[slice?]/
‚îî‚îÄ‚îÄ index.ts                 # Exports (auto-updated by generator)
```

## Error Messages and Actions

### When Manual Creation is Detected
```
‚ùå Manual component creation detected: [file-path]
‚úÖ Use generator instead: npm run generate:component -- ComponentName --layer <layer> --slice <slice> --includeTests true --includeStorybook false
Delete manually created files and regenerate using the proper CLI command with full arguments.
```

### When Test Files are Missing
```
‚ùå Component created without tests: [component-path]
‚úÖ Regenerate with tests: npm run generate:component -- ComponentName --layer <layer> --slice <slice> --includeTests true --includeStorybook false
Always use CLI mode with full arguments.
```

### When Index Exports are Incorrect
```
‚ùå Incorrect index.ts structure detected
‚úÖ Use generator to create proper exports: npm run generate:component -- ComponentName --layer <layer> --slice <slice> --includeTests true --includeStorybook false
Generator automatically updates index.ts with correct patterns when using CLI mode with full arguments.
```

## Generator Command Reference

### CLI Generation (Required Approach)
```bash
# CLI mode with FULL arguments - prevents any interactive prompts
npm run generate:component -- ComponentName --layer <layer> --includeTests <true|false> --includeStorybook <true|false>

# Always specify ALL arguments including defaults
npm run generate:component -- ComponentName --layer shared --includeTests true --includeStorybook false
```

### Required Command Line Arguments
- `--layer <layer>` - FSD layer (shared, entities, features, widgets, pages) **[REQUIRED]**
- `--slice <slice>` - Slice name (required for entities, features, widgets, pages) **[REQUIRED for non-shared layers]**
- `--includeTests <true|false>` - Generate test file **[REQUIRED - specify even if default]**
- `--includeStorybook <true|false>` - Generate Storybook story **[REQUIRED - specify even if default]**
- `--help, -h` - Show help with examples

**Important:** ALL arguments must be specified to prevent interactive prompts.

### Example Generator Sessions

**CLI Mode with Full Arguments (Required Approach):**
```bash
$ npm run generate:component -- LoginButton --layer features --slice auth --includeTests true --includeStorybook false
üöÄ FSD Component Generator

‚úÖ Created component: app/features/auth/ui/LoginButton.tsx
‚úÖ Created test: app/features/auth/ui/LoginButton.spec.tsx
‚úÖ Updated index: app/features/auth/index.ts
```

**Additional CLI Examples:**
```bash
# Shared layer component with full arguments
$ npm run generate:component -- Button --layer shared --includeTests true --includeStorybook false

# Widget component with Storybook
$ npm run generate:component -- UserCard --layer widgets --slice profile --includeStorybook true --includeTests true

# Entity component 
$ npm run generate:component -- ProductCard --layer entities --slice products --includeTests true --includeStorybook false
```

## Integration with Project Rules

This rule works in conjunction with:

### FSD Architecture Rules
- `enforce-project-structure.mdc` - Proper layer organization
- `feature-slice-baseline.mdc` - Required slice structure
- `enforce-layer-boundaries.mdc` - Import restrictions

### Code Quality Rules
- `limit-component-responsibility.mdc` - Component size limits
- `require-pure-function-tests.mdc` - Testing requirements
- `enforce-design-tokens.mdc` - Styling standards

### Development Workflow
- `auto-generate-readme.mdc` - Documentation updates
- Generated components trigger README updates for feature slices

## Benefits Summary

Following this rule provides:

- **Consistency**: All components follow identical patterns through CLI generation
- **Quality**: Built-in testing and TypeScript compliance with full argument specification
- **Speed**: Faster development with automated boilerplate via CLI commands
- **Maintainability**: Standardized structure across the codebase
- **Architecture**: Automatic FSD compliance through CLI generator
- **Documentation**: Integrated Storybook support when specified in CLI arguments
- **Testing**: Complete test coverage from creation with --includeTests true
- **Predictability**: No interactive prompts when using full CLI arguments

## Implementation Timeline

- **Immediate**: All new components must use CLI generator with full arguments
- **Phase 1**: Update team documentation and training on CLI usage
- **Phase 2**: Gradual migration of frequently-modified legacy components using CLI generator
- **Phase 3**: Full codebase alignment during major refactors

This rule ensures that all component creation follows established CLI patterns with full argument specification, reducing inconsistencies and improving overall code quality through standardized non-interactive generation processes.

## Generator Philosophy and Scope

### What the Generator DOES Create:
- ‚úÖ **File Structure**: Proper FSD-compliant directory and file organization
- ‚úÖ **Naming Consistency**: Correct file names, imports, and exports
- ‚úÖ **Type Safety**: TypeScript interfaces and proper type definitions
- ‚úÖ **Test Scaffolding**: Test files with correct imports and basic structure
- ‚úÖ **Integration Points**: Proper index.ts exports and feature baseline files

### What the Generator DOES NOT Create:
- ‚ùå **Business Logic**: Specific functionality implementation
- ‚ùå **API Implementation**: Actual RTK Query endpoints or data fetching
- ‚ùå **Component Logic**: Props interfaces, state management, or event handlers
- ‚ùå **Test Implementation**: Specific test cases or component behavior testing

### Expected Workflow:
1. **Generator Creates Foundation** ‚Üí Consistent structure and naming
2. **Developer Implements Logic** ‚Üí Business requirements and functionality  
3. **Custom Code on Scaffolding** ‚Üí Real implementation over generated templates

The generator's role is to ensure **structural consistency** and **eliminate setup errors**, not to replace thoughtful software design and implementation.

## üéØ SPECIFIC GENERATOR TRIGGERS

### Always Use Generators For:
- **React Components** (.tsx files) ‚Üí `npm run generate:component`
- **Feature README** files ‚Üí `npm run generate:readme`
- **Test files** (if generator exists) ‚Üí `npm run generate:test`
- **Storybook stories** ‚Üí Component generator with `--includeStorybook true`

### Manual Creation Only When:
- No generator exists for the file type
- Generator is broken or unavailable
- Explicitly documented why manual creation is necessary

## üí° CONTINUOUS IMPROVEMENT

### Regular Self-Assessment:
- Am I consistently using generators?
- Am I creating proper execution plans?
- Am I checking for available tools before manual work?
- Are there gaps in my workflow that lead to mistakes?

### Rule Evolution:
- Update this rule based on recurring mistakes
- Add new checkpoints as needed
- Strengthen enforcement mechanisms
- Improve clarity of instructions

## üéØ SUCCESS METRICS

You're following this rule correctly when:
- ‚úÖ All components are created via CLI generators
- ‚úÖ Execution plans include generator usage
- ‚úÖ Manual file creation is rare and justified
- ‚úÖ Workflow mistakes are caught early and corrected
- ‚úÖ Development speed improves due to consistent patterns

This rule serves as a safety net to ensure consistent, high-quality development practices and prevent workflow mistakes that compromise project standards.

[Cursor Rule] Applying enforce-plop-generator.mdc ‚Äî CLI Component Generator enforcement 