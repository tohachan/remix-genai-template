---
description: 
globs: 
alwaysApply: false
---
# Limit Component Responsibility Rule

This rule enforces component responsibility limits in React component files located in `ui/` directories to maintain code quality, readability, and adherence to single responsibility principle.

## Rule Requirements

### Line Count Limit
React component files in `ui/` folders **must not exceed 200 lines** including:
- Import statements
- Component logic
- Styled components
- Type definitions
- Comments and whitespace

### Single Default Export
Each React component file **must have exactly one default-exported component** to maintain clear component boundaries and improve:
- Code organization
- Testing clarity
- Import/export consistency
- Component reusability

## Flagged Violations

This rule flags these issues in `**/ui/**/*.tsx` and `**/ui/**/*.jsx` files:

### Excessive Line Count
- Files with more than 200 lines total
- **Error Message**: "Component file exceeds 200 lines (current: X). Split into smaller presentational and container components."

### Multiple Default Exports
- Files containing more than one `export default` statement
- **Error Message**: "Component file has multiple default exports. Each file should export exactly one component."

## Required Actions

When violations are detected, implement these solutions:

### 1. Split Large Components

**Container/Presentational Pattern:**
```tsx
// ❌ BEFORE: Large monolithic component (250+ lines)
export default function UserDashboard() {
  // 50+ lines of state management
  // 100+ lines of business logic  
  // 100+ lines of JSX
}

// ✅ AFTER: Split into container and presentational
// UserDashboard.container.tsx (50 lines)
export default function UserDashboardContainer() {
  // State management and business logic only
  const { user, loading, actions } = useUserDashboard();
  
  return <UserDashboardView user={user} loading={loading} {...actions} />;
}

// UserDashboardView.tsx (80 lines)  
export default function UserDashboardView({ user, loading, ...actions }) {
  // Pure presentational component with JSX only
}
```

### 2. Extract Sub-components

**Component Decomposition:**
```tsx
// ❌ BEFORE: One large component with multiple responsibilities
export default function ProductCard() {
  // 200+ lines with image, details, actions, reviews
}

// ✅ AFTER: Extracted sub-components
// ProductCard.tsx (40 lines)
export default function ProductCard({ product }) {
  return (
    <Card>
      <ProductImage src={product.image} alt={product.name} />
      <ProductDetails product={product} />
      <ProductActions product={product} />
      <ProductReviews reviews={product.reviews} />
    </Card>
  );
}

// ProductImage.tsx, ProductDetails.tsx, ProductActions.tsx, ProductReviews.tsx
// Each component focused on single responsibility
```

### 3. Extract Custom Hooks

**Logic Extraction:**
```tsx
// ❌ BEFORE: Component with heavy logic (180 lines)
export default function FormComponent() {
  // 100+ lines of form logic, validation, submission
  // 80+ lines of JSX
}

// ✅ AFTER: Logic extracted to hooks
// useFormLogic.ts
export function useFormLogic() {
  // All form logic, validation, submission
  return { formData, errors, handleSubmit, validate };
}

// FormComponent.tsx (60 lines)
export default function FormComponent() {
  const { formData, errors, handleSubmit } = useFormLogic();
  // Only JSX and presentation logic
}
```

## Recommended File Organization

When splitting components, follow these naming conventions:

### Container/Presentational Split
```
ui/
├── UserDashboard/
│   ├── UserDashboard.container.tsx    # Business logic
│   ├── UserDashboard.view.tsx         # Presentation  
│   └── index.ts                       # Re-exports
└── UserDashboard.tsx                  # Alternative: single file under 200 lines
```

### Component Decomposition
```
ui/
├── ProductCard/
│   ├── ProductCard.tsx                # Main component
│   ├── ProductImage.tsx               # Sub-component
│   ├── ProductDetails.tsx             # Sub-component
│   ├── ProductActions.tsx             # Sub-component
│   └── index.ts                       # Re-exports
```

## Enforcement Guidelines

### Immediate Actions Required
1. **Measure line count** of component files in `ui/` directories
2. **Check for multiple default exports** in each file
3. **If violations found**, flag for refactoring before proceeding with development
4. **Suggest specific splitting strategies** based on the component's complexity

### Splitting Decision Matrix

| Component Type | Line Count | Recommended Split |
|---------------|------------|-------------------|
| Form Component | >200 | Extract validation logic to custom hook |
| Data Display | >200 | Split into container (data fetching) + view (presentation) |
| Interactive Widget | >200 | Extract event handlers and state to custom hook |
| Compound Component | >200 | Split into multiple focused sub-components |

## Exception Cases

These scenarios are **still subject to the rule** but may require different approaches:

### Complex Forms
- Extract validation logic to `useFormValidation` hook
- Extract submission logic to `useFormSubmission` hook
- Keep only presentation logic in component

### Data Tables
- Extract table logic to `useTable` hook
- Create separate components for headers, rows, and actions
- Use compound component patterns

### Modal/Dialog Components
- Extract modal state management to custom hook
- Separate modal content from modal container logic
- Create reusable modal components

## Integration with FSD Architecture

This rule supports Feature-Sliced Design by:

### UI Segment Focus
- Applied specifically to `ui/` directories across all FSD layers
- Ensures UI components remain focused and testable
- Supports component reusability across features

### Layer Compliance
- Works within existing FSD import rules
- Encourages proper separation of concerns
- Maintains clean boundaries between presentation and business logic

## Benefits

Following this rule provides:

- **Maintainability**: Smaller components are easier to understand and modify
- **Testability**: Focused components have clearer test boundaries
- **Reusability**: Single-purpose components can be reused across features
- **Performance**: Smaller components can be optimized more effectively
- **Code Review**: Easier to review focused, single-responsibility components
- **Developer Experience**: Reduced cognitive load when working with components

## Error Resolution Steps

When this rule flags a violation:

1. **Analyze the component structure** to identify logical boundaries
2. **Choose appropriate splitting strategy** (container/view, sub-components, or hook extraction)
3. **Refactor gradually** maintaining existing functionality
4. **Test thoroughly** to ensure no regression
5. **Update imports/exports** in consuming files
6. **Verify line count** meets the 200-line requirement

This rule ensures that React components in `ui/` directories remain focused, maintainable, and aligned with single responsibility principles while supporting the overall FSD architecture.
