/**
 * CalendarView Feature API
 * Backend interactions and data fetching logic for calendar-view feature
 * Note: Calendar view uses task management API, this file provides calendar-specific contracts
 */

import { baseApi } from '~/shared/lib/store/api';
import type { Task } from '~/entities/task';

// Calendar-specific types
export interface CalendarEvent {
  id: string;
  title: string;
  start: Date;
  end: Date;
  resource: Task;
}

// API Contract Definitions for calendar-specific operations
// The calendar view primarily uses task-management API through hooks layer
// These contracts are for any calendar-specific operations if needed in the future

/**
 * Request contract for retrieving calendar events with date range filtering
 */
export interface GetCalendarEventsRequest {
  startDate?: string; // ISO date string
  endDate?: string;   // ISO date string
  projectId?: string;
}

/**
 * Response contract for calendar events endpoint
 */
export interface GetCalendarEventsResponse {
  events: CalendarEvent[];
  total: number;
}

/**
 * Request contract for updating task deadline via calendar drag-and-drop
 */
export interface UpdateTaskDeadlineRequest {
  taskId: string;
  newDeadline: string; // ISO date string
}

/**
 * Response contract for task deadline update
 */
export interface UpdateTaskDeadlineResponse {
  task: Task;
  success: boolean;
  message?: string;
}

// RTK Query API endpoints for calendar-specific operations
// Note: Most calendar operations go through task-management hooks following FSD layer boundaries
export const calendarViewApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // Calendar events endpoint (transforms tasks to calendar events)
    getCalendarEvents: builder.query<GetCalendarEventsResponse, GetCalendarEventsRequest>({
      query: (params) => {
        const searchParams = new URLSearchParams();
        if (params.startDate) searchParams.set('startDate', params.startDate);
        if (params.endDate) searchParams.set('endDate', params.endDate);
        if (params.projectId) searchParams.set('projectId', params.projectId);

        const queryString = searchParams.toString();
        return `/calendar/events${queryString ? `?${queryString}` : ''}`;
      },
      providesTags: ['Task'], // Uses Task tags since calendar shows tasks
    }),

    // Update task deadline via calendar drag-and-drop
    updateTaskDeadline: builder.mutation<UpdateTaskDeadlineResponse, UpdateTaskDeadlineRequest>({
      query: ({ taskId, newDeadline }) => ({
        url: `/calendar/tasks/${taskId}/deadline`,
        method: 'PATCH',
        body: { deadline: newDeadline },
      }),
      invalidatesTags: ['Task'],
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useGetCalendarEventsQuery,
  useUpdateTaskDeadlineMutation,
} = calendarViewApi;
