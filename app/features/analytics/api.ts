/**
 * Analytics Feature API
 * Backend interactions and data fetching logic for analytics feature
 */

import { baseApi } from '~/shared/lib/store/api';
import type {
  Analytics,
  GetAnalyticsRequest as EntityGetAnalyticsRequest,
  GetAnalyticsResponse as EntityGetAnalyticsResponse,
  GetAnalyticsByIdRequest as EntityGetAnalyticsByIdRequest,
  GetAnalyticsByIdResponse as EntityGetAnalyticsByIdResponse,
  CreateAnalyticsRequest as EntityCreateAnalyticsRequest,
  CreateAnalyticsResponse as EntityCreateAnalyticsResponse,
  UpdateAnalyticsRequest as EntityUpdateAnalyticsRequest,
  UpdateAnalyticsResponse as EntityUpdateAnalyticsResponse,
  DeleteAnalyticsRequest as EntityDeleteAnalyticsRequest,
  DeleteAnalyticsApiResponse as EntityDeleteAnalyticsApiResponse,
} from '~/entities/analytics';

// API Contract Definitions (Required by enforce-contracts rule)
// These interfaces define the request/response contracts for analytics API endpoints

/**
 * Request contract for retrieving analytics items with optional filtering
 */
export type GetAnalyticsApiRequest = EntityGetAnalyticsRequest;

/**
 * Response contract for analytics list endpoint
 */
export type GetAnalyticsApiResponse = EntityGetAnalyticsResponse;

/**
 * Request contract for retrieving a single analytics item
 */
export type GetAnalyticsByIdApiRequest = EntityGetAnalyticsByIdRequest;

/**
 * Response contract for single analytics endpoint
 */
export type GetAnalyticsByIdApiResponse = EntityGetAnalyticsByIdResponse;

/**
 * Request contract for creating a new analytics item
 */
export type CreateAnalyticsApiRequest = EntityCreateAnalyticsRequest;

/**
 * Response contract for analytics creation endpoint
 */
export type CreateAnalyticsApiResponse = EntityCreateAnalyticsResponse;

/**
 * Request contract for updating an existing analytics item
 */
export type UpdateAnalyticsApiRequest = EntityUpdateAnalyticsRequest;

/**
 * Response contract for analytics update endpoint
 */
export type UpdateAnalyticsApiResponse = EntityUpdateAnalyticsResponse;

/**
 * Request contract for deleting an analytics item
 */
export type DeleteAnalyticsApiRequest = EntityDeleteAnalyticsRequest;

/**
 * Response contract for analytics deletion endpoint
 */
export type DeleteAnalyticsApiResponse = EntityDeleteAnalyticsApiResponse;

// RTK Query API endpoints
export const analyticsApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    getAnalyticsItems: builder.query<GetAnalyticsApiResponse, GetAnalyticsApiRequest>({
      query: (params) => {
        const searchParams = new URLSearchParams();
        if (params.filter) searchParams.set('filter', params.filter);
        if (params.page) searchParams.set('page', params.page.toString());
        if (params.limit) searchParams.set('limit', params.limit.toString());

        const queryString = searchParams.toString();
        return `/analytics${queryString ? `?${queryString}` : ''}`;
      },
      providesTags: ['Analytics'],
    }),

    getAnalyticsById: builder.query<GetAnalyticsByIdApiResponse, GetAnalyticsByIdApiRequest>({
      query: ({ id }) => `/analytics/${id}`,
      providesTags: (result, error, { id }) => [{ type: 'Analytics', id }],
    }),

    createAnalytics: builder.mutation<CreateAnalyticsApiResponse, CreateAnalyticsApiRequest>({
      query: (body) => ({
        url: '/analytics',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Analytics'],
    }),

    updateAnalytics: builder.mutation<UpdateAnalyticsApiResponse, UpdateAnalyticsApiRequest>({
      query: ({ id, ...body }) => ({
        url: `/analytics/${id}`,
        method: 'PUT',
        body,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: 'Analytics', id }],
    }),

    deleteAnalytics: builder.mutation<DeleteAnalyticsApiResponse, DeleteAnalyticsApiRequest>({
      query: ({ id }) => ({
        url: `/analytics/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: ['Analytics'],
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useGetAnalyticsItemsQuery,
  useGetAnalyticsByIdQuery,
  useCreateAnalyticsMutation,
  useUpdateAnalyticsMutation,
  useDeleteAnalyticsMutation,
} = analyticsApi;
