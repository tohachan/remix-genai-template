/**
 * Authentication Feature API
 * Backend interactions and data fetching logic for authentication feature
 */

import { baseApi } from '~/shared/lib/store/api';
import type {
  User,
  LoginCredentials,
  LoginResponse,
  RefreshTokenRequest,
  RefreshTokenResponse,
  RegisterData,
  UpdateUserData,
  ChangePasswordData,
} from '~/entities/user';

// API Contract Definitions (Required by enforce-contracts rule)
// These interfaces define the request/response contracts for authentication API endpoints

/**
 * Response contract for current user endpoint
 */
export interface GetCurrentUserResponse {
  user: User;
}

/**
 * Response contract for logout endpoint
 */
export interface LogoutResponse {
  success: boolean;
  message: string;
}

/**
 * Response contract for register endpoint
 */
export interface RegisterResponse {
  user: User;
  token: string;
  refreshToken: string;
  expiresIn: number;
}

/**
 * Response contract for password change endpoint
 */
export interface ChangePasswordResponse {
  success: boolean;
  message: string;
}

/**
 * Response contract for user update endpoint
 */
export interface UpdateUserResponse {
  user: User;
  success: boolean;
  message?: string;
}

// RTK Query API endpoints
export const authenticationApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    login: builder.mutation<LoginResponse, LoginCredentials>({
      query: (credentials) => ({
        url: '/auth/login',
        method: 'POST',
        body: credentials,
      }),
      invalidatesTags: ['Auth', 'User'],
    }),

    logout: builder.mutation<LogoutResponse, void>({
      query: () => ({
        url: '/auth/logout',
        method: 'POST',
      }),
      invalidatesTags: ['Auth', 'User'],
    }),

    refreshToken: builder.mutation<RefreshTokenResponse, RefreshTokenRequest>({
      query: (body) => ({
        url: '/auth/refresh',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Auth'],
    }),

    getCurrentUser: builder.query<GetCurrentUserResponse, void>({
      query: () => '/auth/me',
      providesTags: ['User', 'Profile'],
    }),

    register: builder.mutation<RegisterResponse, RegisterData>({
      query: (userData) => ({
        url: '/auth/register',
        method: 'POST',
        body: userData,
      }),
      invalidatesTags: ['Auth', 'User'],
    }),

    updateUser: builder.mutation<UpdateUserResponse, UpdateUserData & { id: string }>({
      query: ({ id, ...body }) => ({
        url: `/auth/user/${id}`,
        method: 'PUT',
        body,
      }),
      invalidatesTags: ['User', 'Profile'],
    }),

    changePassword: builder.mutation<ChangePasswordResponse, ChangePasswordData>({
      query: (body) => ({
        url: '/auth/change-password',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Auth'],
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useLoginMutation,
  useLogoutMutation,
  useRefreshTokenMutation,
  useGetCurrentUserQuery,
  useRegisterMutation,
  useUpdateUserMutation,
  useChangePasswordMutation,
} = authenticationApi;
