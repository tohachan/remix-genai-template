import { baseApi } from '~/shared/lib/store/api';
import type {
  CreateTaskRequest,
  UpdateTaskRequest,
  TasksResponse,
  TaskResponse,
  TaskFilters,
} from '~/entities/task';

// API Contract Definitions (Required by enforce-contracts rule)
// These interfaces define the request/response contracts for task API endpoints

/**
 * Request contract for retrieving tasks with optional filtering
 */
export type GetTasksRequest = TaskFilters | void;

/**
 * Response contract for task list endpoint
 */
export type GetTasksApiResponse = TasksResponse;

/**
 * Request contract for retrieving a single task
 */
export interface GetTaskRequest {
  id: string;
}

/**
 * Response contract for single task endpoint
 */
export type GetTaskApiResponse = TaskResponse;

/**
 * Request contract for creating a new task
 */
export type CreateTaskApiRequest = CreateTaskRequest;

/**
 * Response contract for task creation endpoint
 */
export type CreateTaskApiResponse = TaskResponse;

/**
 * Request contract for updating an existing task
 */
export interface UpdateTaskApiRequest {
  id: string;
  body: UpdateTaskRequest;
}

/**
 * Response contract for task update endpoint
 */
export type UpdateTaskApiResponse = TaskResponse;

/**
 * Request contract for deleting a task
 */
export interface DeleteTaskApiRequest {
  id: string;
}

/**
 * Response contract for task deletion endpoint (void response)
 */
export type DeleteTaskApiResponse = void;

// Task API endpoints
export const taskApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    getTasks: builder.query<TasksResponse, TaskFilters | void>({
      query: (filters = {}) => {
        const params = new URLSearchParams();

        // Handle the case where filters is void
        if (filters && typeof filters === 'object') {
          if (filters.projectId) params.set('projectId', filters.projectId);
          if (filters.status) params.set('status', filters.status);
          if (filters.priority) params.set('priority', filters.priority);
          if (filters.assignee) params.set('assignee', filters.assignee);
        }

        const queryString = params.toString();
        return `/tasks${queryString ? `?${queryString}` : ''}`;
      },
      providesTags: ['Task'],
    }),

    getTask: builder.query<TaskResponse, string>({
      query: (id) => `/tasks/${id}`,
      providesTags: (result, error, id) => [{ type: 'Task', id }],
    }),

    createTask: builder.mutation<TaskResponse, CreateTaskRequest>({
      query: (body) => ({
        url: '/tasks',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Task'],
    }),

    updateTask: builder.mutation<TaskResponse, { id: string; body: UpdateTaskRequest }>({
      query: ({ id, body }) => ({
        url: `/tasks/${id}`,
        method: 'PUT',
        body,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: 'Task', id }],
    }),

    deleteTask: builder.mutation<void, string>({
      query: (id) => ({
        url: `/tasks/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: ['Task'],
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useGetTasksQuery,
  useGetTaskQuery,
  useCreateTaskMutation,
  useUpdateTaskMutation,
  useDeleteTaskMutation,
} = taskApi;
