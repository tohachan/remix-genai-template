# === pages-layer-structure.yaml ===
id: pages-layer-structure
description: "Enforces that app/pages/ layer contains composition-focused page components according to FSD principles"
globs:
  - "app/pages/**/*"
always_apply: true

# REQUIRED STRUCTURE
required_files:
  description: "Each page slice `app/pages/<page>/` MUST contain:"
  files:
    - "`ui/index.tsx` — Main page component that composes widgets and features"
    - "`ui/index.spec.tsx` — Integration tests for the full page"
    - "`README.md` — Page documentation including routing and SEO information"

# PAGE RESPONSIBILITIES
what_pages_should_contain:
  description: "Pages are composition layers that should:"
  responsibilities:
    - "Import and compose widgets from `app/widgets/`"
    - "Import and compose features from `app/features/`"
    - "Handle page-level concerns: routing, SEO, layout, data loading"
    - "Provide page-specific context and state management"

what_pages_should_not_contain:
  prohibited:
    - "Business logic — belongs in features"
    - "Reusable components — belongs in features or shared"
    - "API calls — should be abstracted through features/widgets"
    - "Complex state management — should be in features or shared"

# EXAMPLES
structure_example:
  correct: |
    ✅ CORRECT:
    app/pages/dashboard/
    ├── ui/
    │   ├── index.tsx         # Main dashboard page
    │   └── index.spec.tsx    # Page integration tests
    └── README.md             # Page documentation

implementation_examples:
  correct: |
    // ✅ CORRECT - Composition-focused page
    // app/pages/dashboard/ui/index.tsx
    import { UserDashboard } from '~/widgets/user-dashboard';
    import { TaskBoard } from '~/widgets/task-board';
    import { AnalyticsWidget } from '~/widgets/analytics-widget';

    export default function DashboardPage() {
      return (
        <div className="dashboard-page">
          <header>
            <h1>Dashboard</h1>
          </header>
          
          <main className="dashboard-grid">
            <UserDashboard />
            <TaskBoard />
            <AnalyticsWidget />
          </main>
        </div>
      );
    }

  incorrect: |
    // ❌ INCORRECT - Business logic in page
    export default function DashboardPage() {
      const [tasks, setTasks] = useState([]);
      
      useEffect(() => {
        // ❌ Direct API calls in page
        fetch('/api/tasks').then(/* ... */);
      }, []);
      
      const handleCreateTask = () => {
        // ❌ Business logic in page
      };
      
      return (
        <div>
          {/* ❌ Inline business components */}
          <TaskForm onSubmit={handleCreateTask} />
          <TaskList tasks={tasks} />
        </div>
      );
    }

# NAMING CONVENTION
naming_rules:
  - "File name: Always `ui/index.tsx` (not `ui/<page>.page.tsx`)"
  - "Component name: `<Page>Page` (e.g., `DashboardPage`, `HomePage`)"
  - "Export: Default export"

# REMIX INTEGRATION
remix_routing: |
  // app/routes/dashboard.tsx
  import DashboardPage from '~/pages/dashboard/ui';

  export default DashboardPage;

# SEO METADATA
page_metadata: |
  // app/pages/dashboard/ui/index.tsx
  import type { MetaFunction } from '@remix-run/node';

  export const meta: MetaFunction = () => {
    return [
      { title: 'Dashboard - MyApp' },
      { name: 'description', content: 'User dashboard with tasks and analytics' },
    ];
  };

# ENFORCEMENT RULES
enforcement_checks:
  - "Check for proper composition — Pages should import from widgets/features"
  - "Check for correct file naming — Use `ui/index.tsx` pattern"
  - "Check for integration tests — Each page should have tests"
  - "If violations found, prompt for refactoring"

# FSD INTEGRATION
fsd_compliance:
  - "Enforces composition over implementation in pages"
  - "Maintains clear separation between page layout and business logic"
  - "Supports proper dependency flow: pages → widgets → features → entities → shared"
  - "Enables reusability of widgets and features across pages"

# FLAGGED PATTERNS
anti_patterns:
  - "Pages containing business logic instead of composition"
  - "Direct API calls in page components"
  - "Complex state management in page components"
  - "Inline business components instead of imports from features"
  - "Missing integration tests for pages"
  - "Incorrect file naming (not using ui/index.tsx pattern)"
  - "Missing SEO metadata in page components"
  - "Application-level concerns mixed with page layout"

# CORRECT APPROACH
correct_pattern: |
  **Page Structure:**
  app/pages/<page>/
  ├── ui/
  │   ├── index.tsx         # Main page component (composition only)
  │   └── index.spec.tsx    # Page integration tests
  └── README.md             # Page documentation

  **Page Implementation:**
  // Composition-focused page
  import { WidgetA } from '~/widgets/widget-a';
  import { WidgetB } from '~/widgets/widget-b';
  import { FeatureC } from '~/features/feature-c';

  export default function PageName() {
    return (
      <div className="page-layout">
        <WidgetA />
        <WidgetB />
        <FeatureC />
      </div>
    );
  }

  **Page-Level Concerns:**
  - Layout composition
  - SEO metadata
  - Route-specific data loading
  - Page-specific context providers

# DETECTION PATTERNS
flagged_file_patterns:
  - "useState/useEffect with business logic in page components"
  - "Direct fetch() calls in page components"
  - "Business component implementations inside pages"
  - "Complex event handlers in page components"
  - "Missing ui/index.tsx file structure"
  - "Missing integration tests for page components"
  - "Missing README.md in page directories"

# SUGGESTED SOLUTIONS
solutions:
  - "Move business logic to features layer"
  - "Extract API calls to feature hooks"
  - "Import widgets and features instead of implementing inline"
  - "Use composition pattern for page structure"
  - "Add integration tests for page components"
  - "Follow ui/index.tsx naming convention"
  - "Add README.md with page documentation"
  - "Include SEO metadata in page components"

# EXCEPTIONS
rule_exceptions:
  - "Legacy pages during migration (temporary)"
  - "Simple static pages with minimal composition"
  - "Third-party integrations with different patterns"
  - "Experimental pages during development (temporary)"
