# === limit-component-responsibility.yaml ===
id: limit-component-responsibility
description: "Enforces component responsibility limits in React component files to maintain code quality and single responsibility principle"
globs:
  - "**/ui/**/*.tsx"
  - "**/ui/**/*.jsx"
always_apply: true

# RULE REQUIREMENTS
limits:
  max_lines: 200
  includes: ["Import statements", "Component logic", "Styled components", "Type definitions", "Comments"]
  
  single_default_export:
    requirement: "Each React component file must have exactly one default-exported component"
    reasons: ["Code organization", "Testing clarity", "Import/export consistency", "Component reusability"]

# FLAGGED VIOLATIONS
violations:
  excessive_line_count:
    threshold: ">200 lines total"
    error: "Component file exceeds 200 lines (current: X). Split into smaller components."

  multiple_default_exports:
    pattern: "More than one `export default` statement"
    error: "Component file has multiple default exports. Each file should export exactly one component."

# REQUIRED REFACTORING STRATEGIES
refactoring_strategies:
  container_presentational_split:
    when: "Components with mixed business logic and presentation"
    before: |
      // ❌ BEFORE: Monolithic component (250+ lines)
      export default function UserDashboard() {
        // 50+ lines of state management
        // 100+ lines of business logic  
        // 100+ lines of JSX
      }
    
    after: |
      // ✅ AFTER: Split into container and presentational
      // UserDashboard.container.tsx (50 lines)
      export default function UserDashboardContainer() {
        const { user, loading, actions } = useUserDashboard();
        return <UserDashboardView user={user} loading={loading} {...actions} />;
      }

      // UserDashboardView.tsx (80 lines)  
      export default function UserDashboardView({ user, loading, ...actions }) {
        // Pure presentational component with JSX only
      }

  component_decomposition:
    when: "Components with multiple UI concerns"
    before: |
      // ❌ BEFORE: One large component (200+ lines)
      export default function ProductCard() {
        // 200+ lines with image, details, actions, reviews
      }
    
    after: |
      // ✅ AFTER: Extracted sub-components
      // ProductCard.tsx (40 lines)
      export default function ProductCard({ product }) {
        return (
          <Card>
            <ProductImage src={product.image} alt={product.name} />
            <ProductDetails product={product} />
            <ProductActions product={product} />
            <ProductReviews reviews={product.reviews} />
          </Card>
        );
      }

  custom_hook_extraction:
    when: "Components with heavy logic"
    before: |
      // ❌ BEFORE: Component with logic (180 lines)
      export default function FormComponent() {
        // 100+ lines of form logic, validation, submission
        // 80+ lines of JSX
      }
    
    after: |
      // ✅ AFTER: Logic extracted to hooks
      // useFormLogic.ts
      export function useFormLogic() {
        // All form logic, validation, submission
        return { formData, errors, handleSubmit, validate };
      }

      // FormComponent.tsx (60 lines)
      export default function FormComponent() {
        const { formData, errors, handleSubmit } = useFormLogic();
        // Only JSX and presentation logic
      }

# FILE ORGANIZATION PATTERNS
organization_patterns:
  container_presentational: |
    ui/
    ├── UserDashboard/
    │   ├── UserDashboard.container.tsx    # Business logic
    │   ├── UserDashboard.view.tsx         # Presentation  
    │   └── index.ts                       # Re-exports
    └── UserDashboard.tsx                  # Alternative: single file <200 lines

  component_decomposition: |
    ui/
    ├── ProductCard/
    │   ├── ProductCard.tsx                # Main component
    │   ├── ProductImage.tsx               # Sub-component
    │   ├── ProductDetails.tsx             # Sub-component
    │   ├── ProductActions.tsx             # Sub-component
    │   └── index.ts                       # Re-exports

# ENFORCEMENT PROCESS
enforcement_steps:
  - "Measure line count of component files in ui/ directories"
  - "Check for multiple default exports in each file"
  - "If violations found, flag for refactoring before proceeding"
  - "Suggest specific splitting strategies based on complexity"

splitting_decision_matrix:
  form_component: "Extract validation logic to custom hook"
  data_display: "Split into container (data) + view (presentation)"
  interactive_widget: "Extract event handlers and state to custom hook"
  compound_component: "Split into multiple focused sub-components"

# EXCEPTION HANDLING
exception_strategies:
  complex_forms:
    - "Extract validation logic to useFormValidation hook"
    - "Extract submission logic to useFormSubmission hook"
    - "Keep only presentation logic in component"

  data_tables:
    - "Extract table logic to useTable hook"
    - "Create separate components for headers, rows, actions"
    - "Use compound component patterns"

  modal_dialogs:
    - "Extract modal state management to custom hook"
    - "Separate modal content from container logic"
    - "Create reusable modal components"

# FSD INTEGRATION
fsd_compliance:
  - "Applied specifically to ui/ directories across all FSD layers"
  - "Ensures UI components remain focused and testable"
  - "Supports component reusability across features"
  - "Works within existing FSD import rules"
  - "Maintains clean boundaries between presentation and business logic"

# ERROR RESOLUTION
resolution_steps:
  - "Analyze component structure to identify logical boundaries"
  - "Choose appropriate splitting strategy"
  - "Refactor gradually maintaining functionality"
  - "Test thoroughly to ensure no regression"
  - "Update imports/exports in consuming files"
  - "Verify line count meets 200-line requirement"

# FLAGGED PATTERNS
anti_patterns:
  - "React component files exceeding 200 lines"
  - "Multiple default exports in single file"
  - "Monolithic components with multiple responsibilities"
  - "Components mixing business logic with presentation"
  - "Large components with embedded state management"
  - "Components with complex validation logic inline"
  - "Components handling multiple concerns simultaneously"
  - "Files with excessive imports and dependencies"
  - "Components with deeply nested JSX structures"

# CORRECT PATTERNS
correct_examples: |
  **Single Responsibility Components:**
  // ✅ Focused component under 200 lines
  export default function UserCard({ user, onEdit, onDelete }) {
    return (
      <Card>
        <UserAvatar src={user.avatar} />
        <UserInfo name={user.name} email={user.email} />
        <UserActions onEdit={onEdit} onDelete={onDelete} />
      </Card>
    );
  }

  **Container/Presentational Pattern:**
  // Container (50 lines)
  export default function UserDashboardContainer() {
    const { user, loading, actions } = useUserDashboard();
    return <UserDashboardView user={user} loading={loading} {...actions} />;
  }

  **Custom Hook Extraction:**
  // Hook (logic)
  export function useFormLogic() {
    return { formData, errors, handleSubmit, validate };
  }

  // Component (presentation)
  export default function FormComponent() {
    const { formData, errors, handleSubmit } = useFormLogic();
    // Only JSX and presentation logic
  }

# DETECTION PATTERNS
flagged_file_patterns:
  - "Files in **/ui/**/*.tsx exceeding 200 lines"
  - "Files in **/ui/**/*.jsx exceeding 200 lines"
  - "Multiple export default statements in single file"
  - "Components with >50 lines of state management"
  - "Components with >100 lines of business logic"
  - "Components with >100 lines of JSX"
  - "Mixed concerns in single component file"

# SUGGESTED SOLUTIONS
solutions:
  - "Split large components into container and presentational patterns"
  - "Extract sub-components for focused responsibilities"
  - "Move business logic to custom hooks"
  - "Create focused, single-purpose components"
  - "Use compound component patterns for complex UI"
  - "Extract validation logic to dedicated hooks"
  - "Separate data fetching from presentation"
  - "Follow single responsibility principle"

# EXCEPTIONS
rule_exceptions:
  - "Type definition files (no components)"
  - "Utility files without React components"
  - "Configuration files"
  - "Test files (different concerns)"
  - "Legacy components during migration (temporary)"
  - "Third-party component wrappers (minimal logic)"
  - "Simple components that naturally stay under 200 lines"
