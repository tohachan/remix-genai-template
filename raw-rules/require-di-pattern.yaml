# === require-di-pattern-optimized.yaml ===
id: require-di-pattern
description: "Enforces dependency injection patterns in React components by flagging direct service imports"
globs:
  - "**/*.tsx"
  - "**/*.jsx"
always_apply: false

# Detection patterns
detection_patterns:
  description: "Detects DI violations and triggers critical-workflow-checks validation"
  trigger_validation: "Use critical-workflow-checks -> mandatory_pre_execution_validation"
  violation_response_reference: "Use required_conflict_response_format from critical-workflow-checks.yaml"
  
  service_import_patterns:
    patterns_that_trigger_validation:
      - "import.*Service.*from.*"
      - "import.*Client.*from.*"
      - "import.*Store.*from.*"
      - ".create(*"
    regex_patterns:
      - "/^import\\s+(\\w+)\\s+from\\s+['\"].*[Ss]ervice(s)?['\"];?$/m"
      - "/^import\\s+\\{\\s*(\\w*[Ss]ervice\\w*)\\s*\\}\\s+from/m"
      - "/^import\\s+(\\w*[Cc]lient\\w*)\\s+from/m"
      - "/^import\\s+\\{\\s*(\\w*[Cc]lient\\w*)\\s*\\}\\s+from/m"
      - "/^import\\s+(\\w*[Ss]tore\\w*)\\s+from/m"
      - "/^import\\s+\\{\\s*(\\w*[Ss]tore\\w*)\\s*\\}\\s+from/m"
      - "/\\.create\\(/m"

  flagged_import_examples:
    - "`import apiClient from 'shared/services/apiClient'`"
    - "`import { authService } from 'shared/services/auth'`"
    - "`import { userStore } from 'features/user'`"
    - "`import httpClient from 'shared/api/httpClient'`"
    - "`axios.create()` calls in component files"

# Error messages
error_messages:
  service_imports: |
    ❌ Avoid importing service instances directly: import {serviceName}
    ✅ Use the corresponding hook instead: const service = use{ServiceName}()

  api_client_imports: |
    ❌ Avoid importing API clients directly: import {clientName}
    ✅ Use dependency injection: const client = useApiClient() or inject via context/props

  store_imports: |
    ❌ Avoid importing store instances directly: import {storeName}
    ✅ Use React context or custom hooks: const store = use{StoreName}()

# Code examples
code_examples:
  bad_direct_service_imports: |
    // ❌ BAD - Direct service imports
    import { authService } from 'shared/services/authService';
    import apiClient from 'shared/services/apiClient';
    import { userStore } from 'features/user';

    function UserProfile() {
      useEffect(() => {
        authService.getCurrentUser().then(setUser);
      }, []);
      
      const handleUpdate = async (data) => {
        await apiClient.patch('/user', data);
        userStore.updateUser(data);
      };
    }

  good_dependency_injection: |
    // ✅ GOOD - Using dependency injection hooks
    import { useAuthService } from 'shared/lib/di/useAuthService';
    import { useApiClient } from 'shared/lib/di/useApiClient';
    import { useUserStore } from 'features/user/lib/useUserStore';

    function UserProfile() {
      const authService = useAuthService();
      const apiClient = useApiClient();
      const userStore = useUserStore();
      
      useEffect(() => {
        authService.getCurrentUser().then(setUser);
      }, [authService]);
    }

# DI implementation patterns
dependency_injection_patterns:
  react_context_hook: |
    // Context setup
    const AuthServiceContext = createContext<AuthService | null>(null);

    export const useAuthService = (): AuthService => {
      const service = useContext(AuthServiceContext);
      if (!service) {
        throw new Error('useAuthService must be used within AuthServiceProvider');
      }
      return service;
    };

  custom_hook_with_container: |
    // DI container hook
    export const useAuthService = () => {
      return container.get<AuthService>('AuthService');
    };

  props_injection: |
    interface UserProfileProps {
      authService?: AuthService;
      apiClient?: ApiClient;
    }

    function UserProfile({ 
      authService = defaultAuthService,
      apiClient = defaultApiClient 
    }: UserProfileProps) {
      // Use injected dependencies
    }

# Allowed import patterns
allowed_import_patterns:
  type_imports: |
    import type { AuthService, User } from '~/entities/user/model/types';
    import type { ApiResponse } from '~/shared/api/types';

  config_constants: |
    import { API_ENDPOINTS } from '~/shared/config/api';
    import { APP_CONFIG } from '~/shared/config/app';

  utilities: |
    import { formatDate, parseQuery } from '~/shared/lib/utils';
    import { validateEmail } from '~/shared/lib/validation';

  react_ui: |
    import { useState, useEffect, useContext } from 'react';
    import { Button } from '~/shared/ui/Button';

# File scope
file_scope:
  applies_to:
    - "React component files (`.tsx`, `.jsx`)"
    - "Files in `app/` directory following FSD architecture"
    - "UI components across all FSD layers"
  
  excludes:
    - "Service implementation files"
    - "DI container setup files"
    - "Configuration files"
    - "Test files (`.spec.ts`, `.test.ts`)"

# Anti-patterns
anti_patterns:
  - "import.*Service.*from"
  - "import.*Client.*from"
  - "import.*Store.*from"
  - "Direct service imports in components"
  - "API client imports in UI components"
  - "axios.create() calls in component files"
  - "Tightly coupled service dependencies"

# Correct pattern
correct_pattern: |
  **Dependency injection using hooks:**
  ```tsx
  import { useAuthService } from 'shared/lib/di/useAuthService';
  
  function UserProfile() {
    const authService = useAuthService();
    // Use injected dependencies
  }
  ```

# Flagged patterns
flagged_patterns:
  - "import.*Service.*from"
  - "import.*Client.*from"
  - "import.*Store.*from"
  - "\\.create\\("
  - "Direct service singleton imports"

# Solutions
suggested_solutions:
  - "Use corresponding hook: const service = use{ServiceName}()"
  - "Use dependency injection: const client = useApiClient()"
  - "Use React context or custom hooks: const store = use{StoreName}()"
  - "Replace direct imports with DI hooks"
  - "Implement React Context pattern"
  - "Use props-based dependency injection"

# Exceptions
exceptions:
  - "Type-only imports with import type"
  - "Configuration and constants imports"
  - "Pure utility function imports"
  - "React and UI component imports"
  - "Service implementation files"
  - "DI container setup files"
  - "Test files"
