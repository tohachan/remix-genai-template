# === remix-integration-test.yaml ===
id: remix-integration-test
description: "Ensures that each <feature>.page.tsx component in the features layer has corresponding integration tests using Playwright or Cypress in the matching <feature>.spec.ts file"
globs:
  - "app/features/*/ui/*.page.tsx"
always_apply: false

# Rule requirements
rule_requirements:
  required_test_coverage:
    description: "Every feature page component `app/features/<feature>/ui/<feature>.page.tsx` **must** have:"
    requirements:
      - "**Corresponding test file**: `app/features/<feature>/ui/<feature>.page.spec.ts` (next to the page component)"
      - "**Integration test framework**: Tests must use either Playwright or Cypress"
      - "**Minimum test coverage**: At least one test that exercises the page component"

# Detection patterns
detection_patterns:
  description: "This rule scans for:"
  
  feature_page_components:
    description: "Feature Page Components"
    pattern: "Files matching pattern: `app/features/*/ui/*.page.tsx`"
    example: "`app/features/auth/ui/auth.page.tsx`"

  expected_test_files:
    description: "Expected Test Files"
    pattern: "Files matching pattern: `app/features/*/ui/*.spec.ts`"
    example: "`app/features/auth/ui/auth.page.spec.ts`"

  required_test_content:
    description: "Required Test Content"
    frameworks:
      playwright: "Playwright: `import { test, expect } from '@playwright/test'`"
      cypress: "Cypress: `import { describe, it, cy } from 'cypress'` or `describe()` and `it()` functions"

# Enforcement rules
enforcement_rules:
  description: "When working with feature page components:"
  checks:
    - "**Check for missing test file** — If `ui/<feature>.page.tsx` exists but `ui/<feature>.page.spec.ts` doesn't exist"
    - "**Check for empty test file** — If test file exists but contains no Playwright/Cypress tests"
    - "**If violations found**, prompt: Create missing integration test file <path> using template from scripts/templates/integration_test.ts"

# Examples
examples:
  correct_structure:
    description: "**✅ Correct Structure:**"
    structure: |
      app/features/auth/
      ├── ui/
      │   ├── auth.page.tsx      ← Feature page component
      │   └── auth.page.spec.ts  ← Integration tests (required, next to page)
      ├── api.ts
      └── hooks.ts

  missing_test_file:
    description: "**❌ Missing Test File:**"
    structure: |
      app/features/profile/
      ├── ui/
      │   └── profile.page.tsx   ← Feature page component  
      ├── api.ts
      └── hooks.ts
      # Missing: ui/profile.page.spec.ts

  empty_test_file:
    description: "**❌ Empty Test File:**"
    example: |
      // app/features/dashboard/ui/dashboard.page.spec.ts
      // Empty file or no actual tests
      export {};

# Required test template
required_test_template:
  description: "Missing test files should be created using the template from `scripts/templates/integration_test.ts` with these characteristics:"
  
  playwright_template:
    description: "Playwright Template Structure"
    example: |
      import { test, expect } from '@playwright/test';

      test.describe('<Feature> Page', () => {
        test('should load and render the page', async ({ page }) => {
          await page.goto('/feature-route');
          
          // Add assertions for page elements
          await expect(page.locator('[data-testid="feature-main"]')).toBeVisible();
        });

        test('should handle user interactions', async ({ page }) => {
          await page.goto('/feature-route');
          
          // Add interaction tests
          // await page.click('[data-testid="submit-button"]');
          // await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
        });
      });

  cypress_template:
    description: "Cypress Template Structure"
    example: |
      describe('<Feature> Page', () => {
        beforeEach(() => {
          cy.visit('/feature-route');
        });

        it('should load and render the page', () => {
          cy.get('[data-testid="feature-main"]').should('be.visible');
        });

        it('should handle user interactions', () => {
          // Add interaction tests
          // cy.get('[data-testid="submit-button"]').click();
          // cy.get('[data-testid="success-message"]').should('be.visible');
        });
      });

# Violation detection
violation_detection:
  missing_test_file:
    description: "Missing Test File"
    condition: "`ui/<feature>.page.tsx` exists but `ui/<feature>.page.spec.ts` doesn't exist"
    action: "Create test file using `scripts/templates/integration_test.ts`"

  empty_or_invalid_test_file:
    description: "Empty or Invalid Test File"
    conditions:
      - "Test file exists but contains no Playwright or Cypress test functions"
      - "No `test()`, `it()`, or `describe()` function calls found"
      - "Missing required framework imports"

  framework_detection:
    description: "Framework Detection"
    detection_criteria:
      playwright: "**Playwright**: `@playwright/test` import and `test()` function usage"
      cypress: "**Cypress**: Cypress globals (`describe`, `it`, `cy`) or Cypress imports"

# Error messages
error_messages:
  missing_test_file: "Create missing integration test file `app/features/<feature>/ui/<feature>.page.spec.ts` using template from `scripts/templates/integration_test.ts`"
  empty_test_file: "Add integration tests to `<feature>.page.spec.ts` using Playwright or Cypress framework"
  invalid_framework: "Test file must use Playwright (`@playwright/test`) or Cypress framework"

# Integration with FSD
integration_with_fsd:
  description: "This rule works with Feature-Sliced Design architecture by:"
  benefits:
    - "**Feature Layer Focus**: Only applies to `app/features/` layer page components"
    - "**Slice Isolation**: Each feature slice maintains its own integration tests"
    - "**Page Component Testing**: Specifically targets `*.page.tsx` components that represent complete user-facing pages"
    - "**Baseline Structure**: Ensures test files are part of the required feature baseline"

# Template location
template_location:
  description: "The rule references `scripts/templates/integration_test.ts` which should contain:"
  contents:
    - "Boilerplate test structure for both Playwright and Cypress"
    - "Common test patterns for feature page components"
    - "Placeholder assertions and interactions"
    - "Best practices for integration testing in Remix applications"

# What patterns this rule flags as problematic
anti_patterns:
  - "Feature page components without corresponding test files"
  - "Empty test files with no actual tests"
  - "Test files without proper framework imports"
  - "Missing integration test coverage"
  - "Test files in wrong location (not next to page component)"
  - "Test files without proper naming convention"
  - "Test files without required test functions"
  - "Invalid or missing framework setup"

# Correct approach according to this rule
correct_pattern: |
  **Required test structure for feature pages:**
  ```typescript
  // Playwright Template
  import { test, expect } from '@playwright/test';
  
  test.describe('<Feature> Page', () => {
    test('should load and render the page', async ({ page }) => {
      await page.goto('/feature-route');
      await expect(page.locator('[data-testid="feature-main"]')).toBeVisible();
    });
  
    test('should handle user interactions', async ({ page }) => {
      await page.goto('/feature-route');
      // Add interaction tests
    });
  });
  
  // Cypress Template
  describe('<Feature> Page', () => {
    beforeEach(() => {
      cy.visit('/feature-route');
    });
  
    it('should load and render the page', () => {
      cy.get('[data-testid="feature-main"]').should('be.visible');
    });
  });
  ```

  **File structure:**
  ```
  app/features/<feature>/
  ├── ui/
  │   ├── <feature>.page.tsx      ← Feature page component
  │   └── <feature>.page.spec.ts  ← Integration tests (required)
  ├── api.ts
  └── hooks.ts
  ```

# Patterns that trigger this rule
flagged_patterns:
  - "app/features/*/ui/*.page.tsx without corresponding .spec.ts"
  - "test files without test() or it() functions"
  - "missing @playwright/test or cypress imports"
  - "empty test files"
  - "test files without proper framework setup"

# Solutions this rule suggests
suggested_solutions:
  - "Create missing integration test file using: npm run generate:test <path>"
  - "Add integration tests using Playwright or Cypress framework"
  - "Include at least one test that exercises the page component"
  - "Use template from scripts/templates/integration_test.ts"
  - "Ensure proper framework imports and setup"
  - "Place test files next to page components"
  - "Follow naming convention: <feature>.page.spec.ts"

# Cases where this rule doesn't apply
exceptions:
  - "Test files using alternative but valid testing frameworks"
  - "Test files with different but acceptable naming conventions"
  - "Legacy test files during migration"
  - "Third-party page components with different testing approaches"

# Benefits of following this rule
benefits:
  - "**Quality Assurance**: All user-facing features have integration test coverage"
  - "**Consistency**: Standardized test file naming and location conventions"
  - "**Early Detection**: Catches missing tests during development"
  - "**Template Guidance**: Provides starting point for new integration tests"
  - "**Framework Flexibility**: Supports both Playwright and Cypress"
  - "**FSD Compliance**: Maintains proper feature slice structure"
  - "**Regression Prevention**: Ensures page functionality is tested"
  - "**Documentation**: Tests serve as living documentation of page behavior" 