# === enforce-contracts.yaml ===
id: enforce-contracts
description: "Ensures API files in feature slices contain explicit TypeScript interfaces for requests and responses"
globs:
  - "features/*/api.ts"
always_apply: false

# RULE REQUIREMENTS
mandatory_contracts:
  description: "Every `features/*/api.ts` file MUST contain at least one of:"
  
  preferred_local_interfaces:
    description: "🎯 PREFERRED: Local API Contract Interfaces"
    example: |
      // API Contract Definitions - Required by enforce-contracts rule
      
      /**
       * Request contract for getting items with optional filtering
       */
      export interface GetItemsRequest {
        filter?: string;
        page?: number;
      }

      /**
       * Response contract for items list endpoint
       */
      export interface GetItemsResponse {
        items: Item[];
        total: number;
      }

      /**
       * Request contract for creating a new item
       */
      export interface CreateItemRequest {
        name: string;
        description?: string;
      }

      /**
       * Response contract for item creation endpoint
       */
      export interface CreateItemResponse {
        item: Item;
        success: boolean;
      }

  alternative_type_aliases:
    description: "🔄 ALTERNATIVE: Type Aliases (Extending Entity Types)"
    example: |
      // Import entity types for reuse
      import type {
        Item,
        CreateItemData,
        ItemsResponse,
        ItemFilters,
      } from '~/entities/item';

      // API Contract Definitions (Required by enforce-contracts rule)
      
      /**
       * Request contract extending entity filters
       */
      export type GetItemsApiRequest = ItemFilters | void;

      /**
       * Response contract using entity response type
       */
      export type GetItemsApiResponse = ItemsResponse;

      /**
       * Request contract using entity data type
       */
      export type CreateItemApiRequest = CreateItemData;

      /**
       * Response contract using entity response type
       */
      export interface CreateItemApiResponse {
        item: Item;
        success: boolean;
      }

  advanced_zod_schemas:
    description: "⚡ ADVANCED: Zod Schema Validation"
    example: |
      // Zod schemas for runtime validation
      import { z } from 'zod';

      const CreateItemRequestSchema = z.object({
        name: z.string().min(1),
        description: z.string().optional(),
      });

      const CreateItemResponseSchema = z.object({
        item: z.object({
          id: z.string(),
          name: z.string(),
          description: z.string().optional(),
        }),
        success: z.boolean(),
      });

      export type CreateItemRequest = z.infer<typeof CreateItemRequestSchema>;
      export type CreateItemResponse = z.infer<typeof CreateItemResponseSchema>;

# FSD REQUIREMENTS
why_local_contracts_required:
  not_sufficient: |
    // ❌ NOT SUFFICIENT (Entity imports only):
    import type { User, CreateUserData } from '~/entities/user';

    // RTK Query endpoints using entity types directly
    export const userApi = baseApi.injectEndpoints({
      endpoints: (builder) => ({
        createUser: builder.mutation<User, CreateUserData>({
          // This lacks explicit API contracts!
        }),
      }),
    });

  required: |
    // ✅ REQUIRED (Local API contracts):
    import type { User, CreateUserData } from '~/entities/user';

    // API Contract Definitions (Required by enforce-contracts rule)
    export interface CreateUserApiRequest extends CreateUserData {
      // API-specific request structure
    }

    export interface CreateUserApiResponse {
      user: User;
      success: boolean;
      message?: string;
    }

    // RTK Query endpoints using explicit API contracts
    export const userApi = baseApi.injectEndpoints({
      endpoints: (builder) => ({
        createUser: builder.mutation<CreateUserApiResponse, CreateUserApiRequest>({
          // Now uses explicit API contracts!
        }),
      }),
    });

# DETECTION PATTERNS
valid_patterns:
  - "`interface ApiRequestName { ... }` or `interface ApiResponseName { ... }`"
  - "`type ApiRequestName = { ... }` or `type ApiResponseName = { ... }`"
  - "`export interface GetXRequest` or `export type CreateXResponse`"
  - "`const SchemaName = z.object({...})` (Zod schemas)"

invalid_patterns:
  - "Only entity type imports without local contracts"
  - "Only utility type imports without API-specific contracts"
  - "API endpoints without explicit request/response typing"

# ERROR MESSAGES
error_templates:
  entity_imports_only: |
    ❌ Entity imports detected but no local API contracts found.
    ✅ Add explicit API contracts: export interface GetXRequest { ... }
    ✅ Or use type aliases: export type GetXApiRequest = EntityFilter | void;

  no_contracts_found: |
    ❌ Missing API contracts: please define or import TS interfaces for all API endpoints.
    ✅ Add local interfaces or type aliases for request/response contracts.
    ✅ See examples in .cursor/rules/enforce-contracts.mdc

# RECOMMENDED STRUCTURE
fsd_api_file_structure: |
  // features/user-management/api.ts

  // 1. Import dependencies
  import { baseApi } from '~/shared/lib/store/api';
  import type { User, CreateUserData } from '~/entities/user';

  // 2. API Contract Definitions (REQUIRED)
  export interface GetUsersRequest {
    filter?: string;
    page?: number;
  }

  export interface GetUsersResponse {
    users: User[];
    total: number;
    page: number;
  }

  export type CreateUserApiRequest = CreateUserData;

  export interface CreateUserApiResponse {
    user: User;
    success: boolean;
  }

  // 3. API Implementation
  export const userApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
      getUsers: builder.query<GetUsersResponse, GetUsersRequest>({
        // Implementation
      }),
      createUser: builder.mutation<CreateUserApiResponse, CreateUserApiRequest>({
        // Implementation  
      }),
    }),
  });

# GENERATOR INTEGRATION
generator_support:
  description: "Use enhanced generator template that includes contract definitions by default"
  purpose: "Ensures each feature slice maintains clear, explicit contracts for API interactions"

# FLAGGED PATTERNS
anti_patterns:
  - "Only entity type imports without local contracts"
  - "Only utility type imports without API-specific contracts"
  - "API endpoints without explicit request/response typing"
  - "RTK Query endpoints using entity types directly without local contracts"
  - "Missing API contract definitions in feature slices"
  - "Implicit typing in API endpoint definitions"
  - "No explicit request/response interfaces"
  - "Direct entity usage without API-specific contracts"

# CORRECT APPROACH
correct_examples: |
  **Local API Contract Interfaces (Recommended):**
  // API Contract Definitions - Required by enforce-contracts rule
  export interface GetItemsRequest {
    filter?: string;
    page?: number;
  }
  
  export interface GetItemsResponse {
    items: Item[];
    total: number;
  }
  
  export interface CreateItemRequest {
    name: string;
    description?: string;
  }
  
  export interface CreateItemResponse {
    item: Item;
    success: boolean;
  }

  **Type Aliases (Alternative):**
  // Import entity types for reuse
  import type { Item, CreateItemData, ItemFilters } from '~/entities/item';

  // API Contract Definitions (Required by enforce-contracts rule)
  export type GetItemsApiRequest = ItemFilters | void;
  export type CreateItemApiRequest = CreateItemData;
  
  export interface CreateItemApiResponse {
    item: Item;
    success: boolean;
  }

  **Zod Schema Validation (Advanced):**
  import { z } from 'zod';

  const CreateItemRequestSchema = z.object({
    name: z.string().min(1),
    description: z.string().optional(),
  });

  export type CreateItemRequest = z.infer<typeof CreateItemRequestSchema>;

# DETECTION REGEX
flagged_regex:
  - "interface ApiRequestName"
  - "interface ApiResponseName"
  - "type ApiRequestName"
  - "type ApiResponseName"
  - "export interface GetXRequest"
  - "export type CreateXResponse"
  - "const SchemaName = z.object"
  - "Only entity imports without local contracts"
  - "API endpoints without explicit typing"

# SUGGESTED SOLUTIONS
solutions:
  - "Add explicit API contracts: export interface GetXRequest { ... }"
  - "Use type aliases: export type GetXApiRequest = EntityFilter | void"
  - "Add local interfaces or type aliases for request/response contracts"
  - "Create API-specific request/response interfaces"
  - "Extend entity types with API-specific contracts"
  - "Use Zod schemas for runtime validation"
  - "Follow recommended FSD API file structure"

# EXCEPTIONS
rule_exceptions:
  - "Type-only imports for interface definitions"
  - "Configuration and constants"
  - "Pure utility functions"
  - "Files that don't contain API endpoints"
  - "Legacy API files during migration"
  - "Third-party API integrations with different patterns"
