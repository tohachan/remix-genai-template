# === critical-workflow-checks.yaml ===
id: critical-workflow-checks
description: "Mandatory validation layers for development practices, workflow compliance, quality assurance, and architectural integrity"
globs: []
always_apply: true

# üö® MANDATORY BASELINE REQUIREMENTS VERIFICATION
mandatory_baseline_requirements:
  for_feature_slices:
    requirements:
      - "‚úÖ `api.ts` + `api.spec.ts`"
      - "‚úÖ `hooks.ts` + `hooks.spec.ts`"
      - "‚úÖ `ui/` directory + main component + tests"
      - "‚úÖ `README.md` + `index.ts`"
    stop_rule: "If ANY file missing, CREATE IT before proceeding"

  for_page_slices:
    requirements:
      - "‚úÖ `ui/index.tsx` + `ui/index.spec.tsx`"
      - "‚úÖ `README.md` + `index.ts`"
      - "‚úÖ Route file in `app/routes/`"
    stop_rule: "If ANY file missing, CREATE IT before proceeding"

  for_widget_slices:
    requirements:
      - "‚úÖ `ui/` directory + main component + tests"
      - "‚úÖ `README.md` + `index.ts`"
      - "‚úÖ `model/types.ts` (if needed)"
    stop_rule: "If ANY file missing, CREATE IT before proceeding"

  for_entity_slices:
    requirements:
      - "‚úÖ `model/` directory + type definitions"
      - "‚úÖ `api/` directory (if needed)"
      - "‚úÖ `README.md` + `index.ts`"
    stop_rule: "If ANY file missing, CREATE IT before proceeding"

# üö® ENFORCEMENT PROTOCOL
enforcement_steps:
  - "1. IDENTIFY THE LAYER: Feature, Page, Widget, or Entity"
  - "2. RUN BASELINE CHECK using appropriate checklist above"
  - "3. STOP IF INCOMPLETE: Do not proceed until ALL baseline files exist"
  - "4. CREATE MISSING FILES using generators or templates"
  - "5. VERIFY COMPLETION: Re-check requirements"
  - "6. PROCEED with requested changes"

# AUTOMATED VERIFICATION
baseline_verification_command: |
  # Check slice completeness
  ls app/[layer]/[slice]/

slice_completion_check:
  feature_check: |
    test -f app/features/[slice]/api.ts && \
    test -f app/features/[slice]/api.spec.ts && \
    test -f app/features/[slice]/hooks.ts && \
    test -f app/features/[slice]/hooks.spec.ts && \
    test -d app/features/[slice]/ui && \
    test -f app/features/[slice]/README.md && \
    test -f app/features/[slice]/index.ts && \
    echo "‚úÖ Complete" || echo "‚ùå Incomplete"
  
  page_check: |
    test -f app/pages/[slice]/ui/index.tsx && \
    test -f app/pages/[slice]/ui/index.spec.tsx && \
    test -f app/pages/[slice]/README.md && \
    test -f app/pages/[slice]/index.ts && \
    echo "‚úÖ Complete" || echo "‚ùå Incomplete"

# ERROR PREVENTION
missing_files_protocol:
  steps:
    - "1. IMMEDIATELY STOP current development"
    - "2. REPORT: ‚ö†Ô∏è INCOMPLETE SLICE DETECTED: app/[layer]/[slice]/"
    - "3. AUTO-CREATE missing files using generators"
    - "4. VERIFY completion using checklists"
    - "5. CONTINUE with original request"
  note: "NO user confirmation required - always auto-create missing baseline files"

# üö® PRE-EXECUTION VALIDATION
validation_checklist:
  required_checks:
    - "‚úÖ BASELINE: All layer baseline files exist"
    - "‚úÖ FSD boundaries respected (no widget‚Üífeature imports)"
    - "‚úÖ Import hierarchy correct (pages‚Üíwidgets‚Üífeatures‚Üíentities‚Üíshared)"
    - "‚úÖ DI patterns followed (no direct service imports in UI)"
    - "‚úÖ Security rules respected"
    - "‚úÖ Design tokens used (no hard-coded values)"
    - "‚úÖ Generator usage where required"

conflict_detection_triggers:
  - "Import from higher FSD layer"
  - "Direct service/client imports in UI"
  - "Hard-coded design values"
  - "Security vulnerability patterns"
  - "Manual file creation where generators exist"
  - "Cross-layer boundary violations"

conflict_response_format: |
  üö® ARCHITECTURAL CONFLICT DETECTED:

  **Issue**: [Specific violation]
  **Rule Violated**: [Which rule]
  **Risk Level**: [High/Medium/Low] 
  **Current Request**: [User request]
  **Why Violates Architecture**: [Technical explanation]

  **Solutions**:
  1. [Compliant option 1]
  2. [Compliant option 2] 
  3. [Alternative approach]

  **Recommended**: [Best option]

  How to proceed?

validation_requirements:
  never_proceed_without: "User acknowledgment and compliant solution"
  always_provide: "Multiple compliant alternatives"
  always_explain: "Why request violates architecture"
