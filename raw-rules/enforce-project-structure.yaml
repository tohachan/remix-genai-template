# === enforce-project-structure.yaml ===
id: enforce-project-structure
description: "Enforces Feature-Sliced Design (FSD) architectural methodology within Remix app/ directory"
globs:
  - "app/**/*.ts"
  - "app/**/*.tsx"
  - "app/**/*.js"
  - "app/**/*.jsx"
always_apply: true

# PROJECT STRUCTURE
fsd_structure: |
  app/
  ├── shared/            ← Reusable functionality
  ├── entities/          ← Business entities (user, product)
  ├── features/          ← Product features with business value
  ├── widgets/           ← Large UI chunks with complete use cases
  ├── pages/             ← Full pages or large page sections
  ├── routes/            ← Remix routing convention
  ├── entry.client.tsx   ← Remix entry points
  ├── entry.server.tsx   
  ├── root.tsx           ← Remix root component
  └── tailwind.css       ← Global styles

# LAYER STRUCTURE RULES
layer_rules:
  shared:
    structure: "app/shared/[segment]/"
    rule: "NO slices - divide directly into segments"
    examples: ["app/shared/ui/", "app/shared/lib/", "app/shared/api/"]

  entities_features_widgets_pages:
    structure: "app/[layer]/[slice]/[segment]/"
    rule: "MUST have slices - divide by business domain first"
    examples: ["app/pages/home/ui/", "app/entities/user/model/", "app/features/auth/api/"]

# STANDARD SEGMENTS
segments:
  ui: "UI components, formatters, styles"
  api: "Backend interactions, requests, data types"
  model: "Data schemas, stores, business logic"
  lib: "Slice-specific library code"
  config: "Configuration files, feature flags"

# IMPORT RULES (CRITICAL)
import_hierarchy:
  pages: "can import from: widgets, features, entities, shared"
  widgets: "can import from: features, entities, shared"
  features: "can import from: entities, shared"
  entities: "can import from: shared"
  shared: "can only import from: shared"

special_remix_imports:
  routes: "can import from: pages, widgets, features, entities, shared"
  root: "can import from: shared (global styles/providers)"
  entry: "can import from: shared (initialization)"

slice_rules:
  prohibition: "Slices CANNOT import from other slices on same layer"
  reason: "Ensures high cohesion and low coupling"

# FILE PLACEMENT REQUIREMENTS
placement_steps:
  - "Identify appropriate layer based on code purpose"
  - "Create or use existing slice (except for shared)"
  - "Choose correct segment based on technical purpose"
  - "Verify import rules not violated"

# EXAMPLES
correct_structure: |
  ✅ CORRECT:
  app/shared/ui/button.tsx
  app/entities/user/model/types.ts
  app/features/auth/ui/LoginForm.tsx
  app/pages/home/ui/index.tsx
  app/routes/_index.tsx

incorrect_violations:
  - "app/components/ (use app/shared/ui/ or appropriate layer)"
  - "app/utils/ (use app/shared/lib/)"
  - "app/pages/home.tsx (missing segments: app/pages/home/ui/index.tsx)"
  - "Cross-layer violations (features importing from widgets)"

# ROUTE IMPORT RULES
route_imports:
  required_pattern: "Route files MUST import page components using relative paths"
  
  correct_example: |
    // ✅ CORRECT - Relative import
    import UserPage from '../pages/user/ui';
    export default UserPage;
  
  prohibited_patterns:
    - "Named import from root index: import { UserPage } from '~/pages/user'"
    - "Direct file import: import UserPage from '~/pages/user/ui/user.page.tsx'"

vite_alias_requirement: |
  // vite.config.ts MUST include:
  resolve: {
    alias: { "~": path.resolve(__dirname, "./app") }
  }

# REMIX-SPECIFIC GUIDELINES
remix_considerations:
  routes: "Use app/routes/ for Remix routing, import from app/pages/"
  global_styles: "Keep in app/ root or app/shared/ui/"
  entry_points: "app/entry.*.tsx and app/root.tsx follow Remix conventions"
  build_config: "vite.config.ts stays in project root"

# FLAGGED PATTERNS
anti_patterns:
  - "Files outside app/ directory structure"
  - "Incorrect layer naming (components/, utils/, helpers/)"
  - "Missing segments in layer structure"
  - "Cross-layer import violations"
  - "Slice-to-slice imports on same layer"
  - "Incorrect file placement by purpose"
  - "Non-FSD compliant directory structure"
  - "Routes using incorrect import patterns"
  - "Missing vite alias configuration"

# CORRECT PATTERNS
correct_examples: |
  **Layer Structure:**
  app/shared/[segment]/           # No slices, direct segments
  app/entities/[slice]/[segment]/ # Business entities
  app/features/[slice]/[segment]/ # Product features
  app/widgets/[slice]/[segment]/  # UI chunks
  app/pages/[slice]/[segment]/    # Full pages

  **Import Hierarchy:**
  // Pages can import from all lower layers
  import { UserWidget } from '~/widgets/user';
  import { useAuth } from '~/features/auth';
  import { User } from '~/entities/user';
  import { Button } from '~/shared/ui';

  // Features can only import from entities and shared
  import { User } from '~/entities/user';
  import { apiClient } from '~/shared/api';

  **File Placement:**
  app/shared/ui/Button.tsx        # Reusable UI
  app/entities/user/model/types.ts # User entity
  app/features/auth/ui/LoginForm.tsx # Auth feature
  app/widgets/header/ui/Header.tsx # Header widget
  app/pages/home/ui/index.tsx     # Home page

# DETECTION PATTERNS
flagged_file_patterns:
  - "app/components/ instead of app/shared/ui/"
  - "app/utils/ instead of app/shared/lib/"
  - "Direct page files like app/pages/home.tsx"
  - "Cross-layer imports violating hierarchy"
  - "Slice-to-slice imports on same layer"
  - "Named imports from route pages"
  - "Direct file imports with extensions in routes"
  - "Missing ~ alias in vite.config.ts"

# SUGGESTED SOLUTIONS
solutions:
  - "Move files to correct FSD layer by purpose"
  - "Create proper slice/segment structure"
  - "Fix import violations to follow layer hierarchy"
  - "Use relative imports for route page components"
  - "Configure vite alias for ~ path resolution"
  - "Restructure directories to follow FSD conventions"
  - "Separate shared utilities from business logic"
  - "Organize components by business domain"

# EXCEPTIONS
rule_exceptions:
  - "Remix framework files (app/entry.*.tsx, app/root.tsx)"
  - "Global configuration files (tailwind.css)"
  - "Build configuration (vite.config.ts in root)"
  - "Static assets in public/"
  - "Package configuration (package.json in root)"
  - "Legacy code during migration (temporary)"
  - "Third-party library configurations"
