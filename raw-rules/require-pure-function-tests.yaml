# === require-pure-function-tests.yaml ===
id: require-pure-function-tests
description: "Ensures utility files in shared/utils/ that export functions have corresponding test files with test cases"
globs:
  - "**/shared/utils/**/*.ts"
  - "**/shared/utils/**/*.js"
always_apply: false

# RULE REQUIREMENTS
target_criteria:
  target_files:
    - "Files in `**/shared/utils/**/*.ts` and `**/shared/utils/**/*.js`"
    - "Files that export functions (detected by `export function` or `export const functionName =`)"
    - "Excludes files that only export types, constants, or classes"

  test_requirements:
    description: "For each utility file `shared/utils/example.ts` that exports functions:"
    required:
      - "Corresponding test file `shared/utils/example.spec.ts`"
      - "At least one test case using testing framework (Jest, Vitest)"
      - "Tests should verify function behavior and edge cases"

# DETECTION PATTERNS
function_exports:
  function_declarations: |
    // Function declarations
    export function calculateTotal(items: Item[]): number { }
    export function formatCurrency(amount: number): string { }

  arrow_functions: |
    // Arrow function constants
    export const parseDate = (dateString: string): Date => { }
    export const validateEmail = (email: string): boolean => { }

  function_expressions: |
    // Function expressions
    export const utils = {
      debounce: (fn: Function, delay: number) => { },
      throttle: (fn: Function, limit: number) => { }
    };

# EXPECTED TEST STRUCTURE
test_file_example: |
  // shared/utils/math.spec.ts
  import { calculateTotal, formatCurrency } from './math';

  describe('Math Utilities', () => {
    describe('calculateTotal', () => {
      it('should calculate total correctly', () => {
        expect(calculateTotal([{ price: 10 }, { price: 20 }])).toBe(30);
      });
    });

    describe('formatCurrency', () => {
      it('should format currency with proper symbols', () => {
        expect(formatCurrency(1000)).toBe('$1,000.00');
      });
    });
  });

# ENFORCEMENT ACTIONS
violations:
  missing_test_file:
    error: "Missing test file for shared/utils/[filename].ts"
    solution: "Create test file using: npm run generate:test shared/utils/[filename].ts"

  empty_test_file:
    error: "Test file shared/utils/[filename].spec.ts exists but contains no test cases"
    solution: "Add at least one test case for each exported function"

suggested_command: "npm run generate:test shared/utils/[filename].ts"

# FILE NAMING CONVENTION
naming_convention:
  utility_file: "shared/utils/stringUtils.ts"
  test_file: "shared/utils/stringUtils.spec.ts"
  alternative: "shared/utils/stringUtils.test.ts (also acceptable)"

# EXAMPLES
structure_examples:
  correct: |
    ✅ CORRECT:
    app/shared/utils/
    ├── dateUtils.ts          # Exports date functions
    ├── dateUtils.spec.ts     # Contains tests for date functions
    ├── stringUtils.ts        # Exports string functions  
    ├── stringUtils.spec.ts   # Contains tests for string functions
    └── constants.ts          # No functions, only constants (no test required)

  missing_tests: |
    ❌ MISSING TESTS:
    app/shared/utils/
    ├── mathUtils.ts          # Exports functions but no test file
    ├── formatters.ts         # Exports functions but no test file
    └── validators.ts         # Exports functions but no test file

    Required actions:
    - Create `mathUtils.spec.ts` using `npm run generate:test shared/utils/mathUtils.ts`
    - Create `formatters.spec.ts` using `npm run generate:test shared/utils/formatters.ts`
    - Create `validators.spec.ts` using `npm run generate:test shared/utils/validators.ts`

# EXCLUDED FILES
rule_exclusions:
  type_only_files: |
    // No test required
    export type UserRole = 'admin' | 'user';
    export interface ApiResponse<T> { data: T; status: number; }

  constant_only_files: |
    // No test required
    export const API_ENDPOINTS = { users: '/api/users' };
    export const DEFAULT_CONFIG = { timeout: 5000 };

  class_only_files: |
    // Different testing approach, not covered by this rule
    export class DataProcessor { }
    export class ApiClient { }

# TESTING FRAMEWORK INTEGRATION
framework_requirements:
  jest_config: |
    {
      "testMatch": [
        "**/__tests__/**/*.(ts|js)",
        "**/*.(test|spec).(ts|js)"
      ]
    }

  generate_test_command:
    description: "The `npm run generate:test` command should:"
    requirements:
      - "Create new `.spec.ts` file next to utility file"
      - "Import all exported functions from utility file"
      - "Generate basic test stubs for each function"
      - "Include proper TypeScript types and Jest/Vitest imports"

# FSD COMPLIANCE
fsd_integration:
  - "Enforces quality standards in the `shared` layer"
  - "Ensures reliable utilities across all features"
  - "Maintains clean separation of concerns"
  - "Supports baseline architecture requirements"

# FLAGGED PATTERNS
anti_patterns:
  - "Utility files in shared/utils/ that export functions without test files"
  - "Test files that exist but contain no test cases"
  - "Pure functions without behavior verification"
  - "Utility functions without edge case testing"
  - "Missing test coverage for exported function utilities"
  - "Untested shared utilities used across features"
  - "Function exports without corresponding spec files"

# CORRECT APPROACH
complete_example: |
  **Complete Test Coverage for Utilities:**
  
  // shared/utils/math.ts
  export function calculateTotal(items: Item[]): number {
    return items.reduce((sum, item) => sum + item.price, 0);
  }

  export function formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  }

  // shared/utils/math.spec.ts
  import { calculateTotal, formatCurrency } from './math';

  describe('Math Utilities', () => {
    describe('calculateTotal', () => {
      it('should calculate total correctly', () => {
        expect(calculateTotal([{ price: 10 }, { price: 20 }])).toBe(30);
      });

      it('should handle empty array', () => {
        expect(calculateTotal([])).toBe(0);
      });
    });

    describe('formatCurrency', () => {
      it('should format currency with proper symbols', () => {
        expect(formatCurrency(1000)).toBe('$1,000.00');
      });

      it('should handle decimal values', () => {
        expect(formatCurrency(123.45)).toBe('$123.45');
      });
    });
  });

  **File Structure:**
  shared/utils/
  ├── utility.ts      # Exports functions
  ├── utility.spec.ts # Tests for functions
  └── constants.ts    # Only constants (no test needed)

# DETECTION REGEX
flagged_regex:
  - "export function.*\\(.*\\)" # Function declarations
  - "export const.*=.*=>.*" # Arrow function constants
  - "export const.*=.*function.*" # Function expressions
  - "Files in **/shared/utils/**/*.ts without corresponding .spec.ts"
  - "Files in **/shared/utils/**/*.js without corresponding .spec.js"
  - "Test files with no actual test cases"

# SUGGESTED SOLUTIONS
solutions:
  - "Create corresponding test files for utility functions"
  - "Use npm run generate:test to scaffold test files"
  - "Add test cases for each exported function"
  - "Verify function behavior and edge cases in tests"
  - "Include proper TypeScript types in test files"
  - "Use Jest/Vitest testing frameworks"
  - "Test pure function inputs and outputs"
  - "Cover error cases and boundary conditions"

# EXCEPTIONS
rule_exceptions:
  - "Files that only export types or interfaces"
  - "Files that only export constants"
  - "Files that only export classes (different testing approach)"
  - "Configuration files without functions"
  - "Type definition files"
  - "Files with only re-exports from other modules"
  - "Legacy utility files during migration (temporary)"
