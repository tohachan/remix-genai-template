# === enforce-a11y-support-optimized.yaml ===
id: enforce-a11y-support
description: "Ensures React components follow accessibility best practices for inclusive user experiences"
globs:
  - "**/*.tsx"
  - "**/*.jsx"
always_apply: false

# Core requirements
core_requirements:
  semantic_html: |
    Use semantic HTML elements:
    ✅ Good: <main><section><h1>Title</h1><article><p>Content</p></article></section></main>
    ❌ Bad: <div><div><div>Title</div><div><div>Content</div></div></div></div>

  aria_labels: |
    Interactive elements need accessible names:
    ✅ Good: <button aria-label="Close modal">×</button>
    ❌ Bad: <button>×</button>

  keyboard_navigation: |
    All interactive elements must be keyboard accessible:
    ✅ Good: 
    <div role="button" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleClick()} onClick={handleClick}>
    ❌ Bad: <div onClick={handleClick}>

# Form accessibility
form_accessibility:
  input_labels: |
    All inputs require proper labels:
    ✅ Good: <label htmlFor="email">Email</label><input id="email" type="email" />
    ✅ Alternative: <input aria-label="Email Address" type="email" />
    ❌ Bad: <label>Email</label><input type="email" />

  error_messages: |
    Form errors must be programmatically associated:
    <input id="password" aria-describedby="password-error" aria-invalid={hasError} />
    {hasError && <div id="password-error" role="alert">Password must be 8+ characters</div>}

# Interactive elements
interactive_elements:
  focus_management: |
    Manage focus for dynamic content:
    const Modal = ({ isOpen }) => {
      const modalRef = useRef<HTMLDivElement>(null);
      useEffect(() => { if (isOpen) modalRef.current?.focus(); }, [isOpen]);
      return <div ref={modalRef} role="dialog" aria-modal="true" tabIndex={-1} />;
    };

  loading_states: |
    Provide accessible loading indicators:
    {isLoading && (
      <div role="status" aria-live="polite">
        <span className="sr-only">Loading...</span>
        <LoadingSpinner />
      </div>
    )}

# Color and contrast
color_contrast:
  text_alternatives: |
    Don't rely solely on color:
    ✅ Good: <span className="text-red-600"><ExclamationIcon aria-hidden="true" />Required</span>
    ❌ Bad: <span className="text-red-600">*</span>

# Required patterns
required_patterns:
  screen_reader_support: |
    Hide decorative elements, provide screen reader text:
    <button><HeartIcon aria-hidden="true" /><span className="sr-only">Add to favorites</span></button>
    <img src="decoration.png" alt="" role="presentation" />

  dynamic_content: |
    Announce dynamic changes:
    <div aria-live="assertive" aria-atomic="true">{status && <span>{status}</span>}</div>
    <div role="status">{itemsCount} items in cart</div>

# Enforcement guidelines
enforcement_guidelines:
  required_checks:
    - "Keyboard navigation - Can all functionality be accessed via keyboard?"
    - "Screen reader support - Are all elements properly labeled?"
    - "Color contrast - Does text meet WCAG contrast requirements?"
    - "Focus indicators - Are focus states visible and clear?"
    - "Error handling - Are form errors properly announced?"
    - "Loading states - Are async operations communicated accessibly?"

# Anti-patterns
anti_patterns:
  - "Generic divs instead of semantic elements"
  - "Interactive elements without accessible names"
  - "Click-only interactions without keyboard support"
  - "Form inputs without proper labels"
  - "Missing error message associations"
  - "Relying solely on color to convey information"
  - "Missing alt attributes on informative images"
  - "Low color contrast ratios"
  - "Missing focus indicators"
  - "Unlabeled buttons and links"
  - "Decorative elements not hidden from screen readers"
  - "Dynamic content without live regions"
  - "Custom interactive elements without proper roles"

# Correct pattern
correct_pattern: |
  **Semantic HTML and accessibility:**
  ```tsx
  // Semantic elements
  <main><section><h1>Title</h1><article><p>Content</p></article></section></main>
  
  // Proper labeling
  <button aria-label="Close modal">×</button>
  <input aria-label="Search products" type="search" />
  <img src="avatar.jpg" alt="User profile photo" />
  
  // Keyboard support
  <div role="button" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleClick()} onClick={handleClick}>
  
  // Form accessibility
  <label htmlFor="email">Email</label><input id="email" type="email" required />
  
  // Error handling
  <input aria-describedby="error" aria-invalid={hasError} />
  {hasError && <div id="error" role="alert">Error message</div>}
  
  // Live regions
  <div aria-live="polite" role="status">{status}</div>
  ```

# Flagged patterns
flagged_patterns:
  - "missing alt attributes"
  - "onClick without onKeyDown"
  - "div.*role=\"button\".*tabIndex"
  - "input without label"
  - "missing semantic elements"
  - "color-only information"
  - "missing focus management"
  - "unlabeled interactive elements"

# Solutions
suggested_solutions:
  - "Use semantic HTML elements with inherent accessibility"
  - "Add aria-label for interactive elements without visible text"
  - "Ensure keyboard navigation for all interactive elements"
  - "Associate labels with form inputs using htmlFor/id"
  - "Use aria-describedby for error messages and help text"
  - "Provide text alternatives for color-only information"
  - "Implement proper focus management for dynamic content"
  - "Add live regions for dynamic content announcements"
  - "Use appropriate ARIA roles for custom components"
  - "Ensure sufficient color contrast ratios"

# Exceptions
exceptions:
  - "Decorative images with empty alt attributes"
  - "Hidden elements with aria-hidden"
  - "Screen reader only text with sr-only class"
  - "Third-party components with built-in accessibility"
  - "Legacy components during accessibility migration"
