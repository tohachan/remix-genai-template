# === enforce-plop-generator.yaml ===
id: enforce-plop-generator
description: "Mandates CLI component generator usage with full arguments for React components to ensure FSD architecture consistency"
globs:
  - "**/ui/**/*.tsx"
  - "**/ui/**/*.ts"
always_apply: true

# üö® MANDATORY STOP POINTS
mandatory_stop_points:
  auto_detection_patterns:
    manual_creation_indicators:
      - "export default function ComponentName()"
      - "Files created in **/ui/**/*.tsx without generator"
      - "Missing test files for components"
      - "Incorrect index.ts export structure"
    
    violation_handling:
      - "STOP immediately"
      - "Use critical-workflow-checks validation format"
      - "Show generator alternatives"
      - "Wait for user acknowledgment"

  pre_creation_checks:
    - "Checked if CLI generator exists for this file type?"
    - "Attempted generator first before manual creation?"
    - "Documented why manual creation necessary (if unavailable)?"

# üö® ERROR PREVENTION
critical_patterns_stop_immediately:
  - "Starting to write JSX component syntax manually"
  - "Creating files in `ui/` directories by hand"
  - "Writing test files without generators"
  - "Creating README.md files in features manually"
  - "Writing `export default function ComponentName()` from scratch"

recovery_protocol:
  - "PAUSE current work"
  - "DELETE manually created files"
  - "RUN appropriate generator"
  - "CONTINUE with customization"

mistake_recovery:
  - "ACKNOWLEDGE mistake publicly"
  - "STOP current development"
  - "DELETE manually created files"
  - "RUN appropriate generators"
  - "MIGRATE content to generated files"
  - "CONTINUE development"

# WORKFLOW INTEGRATION
pre_task_checklist: |
  Before task execution:
  1. ‚úÖ Read relevant README files
  2. ‚úÖ Create step-by-step execution plan  
  3. ‚úÖ Identify generator needs for each step
  4. ‚úÖ Verify available CLI commands
  5. ‚úÖ Plan final validation with linting
  6. ‚úÖ Begin implementation

step_execution_pattern: |
  For each file creation step:
  1. ‚úÖ Check: Generator available?
  2. ‚úÖ Use: Run generator with full arguments
  3. ‚úÖ Verify: All expected files created
  4. ‚úÖ Customize: Modify generated content

final_validation: |
  After implementation:
  1. ‚úÖ npm run lint:fix
  2. ‚úÖ npm run type-check
  3. ‚úÖ Fix type errors immediately
  4. ‚úÖ npm run test
  5. ‚úÖ Verify functionality

# GENERATOR COMMANDS
available_generators:
  component: "npm run generate:component -- ComponentName --layer [features|widgets|entities|shared] --slice sliceName --includeTests true --includeStorybook false"
  feature: "npm run generate:feature -- feature-name"
  readme: "npm run generate:readme slice-name"
  test: "npm run generate:test -- utility-name"

command_examples:
  shared_component: "npm run generate:component -- Button --layer shared --includeTests true --includeStorybook false"
  feature_component: "npm run generate:component -- LoginButton --layer features --slice auth --includeTests true --includeStorybook false"
  widget_with_storybook: "npm run generate:component -- UserCard --layer widgets --slice profile --includeStorybook true --includeTests true"

# GENERATOR SCOPE
what_generator_creates:
  - "‚úÖ File Structure: FSD-compliant organization"
  - "‚úÖ Naming Consistency: Correct names, imports, exports"
  - "‚úÖ Type Safety: TypeScript interfaces"
  - "‚úÖ Test Scaffolding: Test files with structure"
  - "‚úÖ Integration Points: index.ts exports"

what_generator_does_not_create:
  - "‚ùå Business Logic: Specific functionality"
  - "‚ùå API Implementation: RTK Query endpoints"
  - "‚ùå Component Logic: Props, state, handlers"
  - "‚ùå Test Implementation: Specific test cases"

expected_workflow:
  - "Generator Creates Foundation ‚Üí Structure & naming"
  - "Developer Implements Logic ‚Üí Business requirements"
  - "Custom Code on Scaffolding ‚Üí Real implementation"

# SPECIFIC TRIGGERS
always_use_generators_for:
  - "React Components (.tsx) ‚Üí `npm run generate:component`"
  - "Complete features ‚Üí `npm run generate:feature`"
  - "Feature README ‚Üí `npm run generate:readme`"
  - "Test files ‚Üí `npm run generate:test`"
  - "Storybook stories ‚Üí Component generator with `--includeStorybook true`"

manual_creation_only_when:
  - "No generator exists for file type"
  - "Generator broken/unavailable"
  - "Explicitly documented why manual creation necessary"

# VALIDATION REQUIREMENTS
post_generation_validation:
  - "File structure matches FSD patterns"
  - "Import/export statements correct"
  - "TypeScript compilation no errors"
  - "API contracts properly defined"
  - "Tests properly scaffolded"

linter_integration:
  - "API files pass `fsd/enforce-api-contracts`"
  - "Components pass design token rules"
  - "All files have no TS errors"
  - "Test files properly structured"

# FLAGGED PATTERNS
anti_patterns:
  - "Manual React component creation"
  - "Creating ui/ files by hand"
  - "export default function from scratch"
  - "Test files without generators"
  - "Feature README manual creation"
  - "Interactive mode usage"
  - "Partial CLI arguments"
  - "No generator check before creation"
  - "Skipped post-generation validation"

# CORRECT APPROACH
correct_pattern: |
  Generator-First Approach:
  1. Check for CLI generators before creating files
  2. Use full arguments to prevent interactive prompts
  3. Verify generated files match FSD patterns
  4. Customize generated content as needed
  5. Run validation (lint, type-check, test)

  Recovery Pattern:
  1. STOP immediately if manual creation detected
  2. DELETE manually created files
  3. RUN appropriate generator
  4. CONTINUE with customization

# EXCEPTIONS
rule_does_not_apply_to:
  - "File types not supported by generators"
  - "Broken/unavailable generators"
  - "Legacy code that cannot be regenerated"
  - "Emergency fixes where generator impractical"
  - "Non-component TS files outside ui/"
  - "Configuration files and constants"
  - "Third-party library integrations"
