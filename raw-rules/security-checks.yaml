# === security-checks.yaml ===
id: security-checks
description: "Enforces secure coding practices by detecting common security vulnerabilities and triggering mandatory architectural validation"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
always_apply: true

# ðŸš¨ CRITICAL REQUIREMENT
critical_requirement:
  auto_detection_triggers:
    high_risk_patterns:
      - "dangerouslySetInnerHTML.*userInput"
      - "innerHTML.*=.*userInput"
      - "eval\\("
      - "new Function\\("
      - "localStorage.setItem.*password"
      - "console.log.*password"
      - "SELECT.*\\+.*user"
      - "WHERE.*\\$\\{.*\\}"
  
  security_alert_format: |
    ðŸš¨ SECURITY ALERT: [Brief description]

    **Issue**: [Security problem details]
    **Risk Level**: HIGH
    **Location**: [File:line]
    **Rule Violated**: security-checks -> [specific rule]

    **Solutions**:
    1. [Secure option 1]
    2. [Secure option 2]
    
    **Best Practice**: [Secure approach explanation]

    Choose secure solution before proceeding.

# SECURITY VULNERABILITIES
security_vulnerabilities:
  cross_site_scripting_xss:
    dangerous_patterns:
      - "dangerouslySetInnerHTML with user input"
      - "innerHTML = userInput"
      - "document.write(userInput)"
    
    secure_alternatives:
      sanitized_html: "DOMPurify.sanitize(userInput)"
      safe_text: "element.textContent = userInput"

  injection_vulnerabilities:
    dangerous_patterns:
      - "String concatenation in SQL: `SELECT * FROM users WHERE id = ${userId}`"
      - "Template literals: `WHERE name = '${userName}'`"
    
    secure_alternatives:
      parameterized: "db.query('SELECT * FROM users WHERE id = ?', [userId])"
      orm: "User.findOne({ where: { id: userId } })"

  authentication_issues:
    dangerous_patterns:
      - "Weak password validation: password.length > 4"
      - "Client-side auth: if (user.role === 'admin')"
      - "Hardcoded credentials: const API_KEY = 'abc123'"
    
    secure_alternatives:
      strong_password: "8+ chars with regex validation"
      server_verification: "await verifyPermissionOnServer(userId, action)"
      env_variables: "process.env.API_KEY"

  sensitive_data_exposure:
    dangerous_patterns:
      - "Logging sensitive: console.log('password:', password)"
      - "Stack traces: return res.json({ error: error.stack })"
      - "Sensitive in response: { ...userData, password: hash }"
    
    secure_alternatives:
      safe_logging: "console.log('Auth attempt for user:', userId)"
      generic_errors: "isDev ? error.message : 'Internal server error'"
      exclude_sensitive: "const { password, ...safe } = userData"

  insecure_file_operations:
    dangerous_patterns:
      - "Unrestricted paths: fs.readFile(`/uploads/${req.params.filename}`)"
      - "User-controlled: fs.unlink(req.body.filepath)"
    
    secure_alternatives:
      validate_paths: "path.basename() + startsWith() validation"
      whitelist: "allowedPaths.some(allowed => path.startsWith(allowed))"

  insecure_headers_cors:
    dangerous_patterns:
      - "Missing headers: app.use((req, res, next) => next())"
      - "Permissive CORS: cors({ origin: '*' })"
    
    secure_alternatives:
      security_headers: "helmet({ contentSecurityPolicy: true, hsts: true })"
      restrictive_cors: "cors({ origin: ['https://domain.com'] })"

  client_side_issues:
    dangerous_patterns:
      - "Sensitive localStorage: localStorage.setItem('authToken', jwt)"
      - "Using eval: eval(userInput)"
    
    secure_alternatives:
      secure_cookies: "httpOnly cookies via server Set-Cookie"
      avoid_eval: "JSON.parse() for data parsing"

# AUTOMATIC DETECTION
automatic_checks:
  immediate_alert_patterns:
    - "dangerouslySetInnerHTML without sanitization"
    - "eval(), new Function(), setTimeout(string)"
    - "SQL string concatenation"
    - "Hardcoded secrets"
    - "console.log() with sensitive data"
    - "Missing input validation"
    - "Permissive CORS"
    - "Missing auth checks"

# ALERT TEMPLATES
alert_templates:
  xss: "ðŸš¨ XSS: dangerouslySetInnerHTML/unescaped input â†’ Use DOMPurify"
  injection: "ðŸš¨ INJECTION: String concatenation in queries â†’ Use parameterized queries"
  data_exposure: "ðŸš¨ DATA EXPOSURE: Sensitive logging â†’ Remove from logs/responses"

# SECURITY BEST PRACTICES
best_practices:
  input_validation:
    - "Validate user input client + server side"
    - "Use whitelist validation"
    - "Sanitize all user input"

  auth_authorization:
    - "Server-side permission verification"
    - "Strong password requirements"
    - "Secure session management"

  data_protection:
    - "Never log sensitive data"
    - "Use HTTPS for transmission"
    - "Generic error messages in production"

  code_security:
    - "Avoid dynamic code execution"
    - "Use security linters"
    - "Keep dependencies updated"

# DEVELOPMENT WORKFLOW
workflow_integration:
  pre_commit: "Security scan on modified files"
  code_review: "Mandatory review for auth/input handling"
  
  environment_security:
    development: "Use .env.local, never commit .env"
    production: "Security headers, env variables, monitoring"

# FSD INTEGRATION
fsd_integration:
  layers:
    shared: "Secure utilities and API clients"
    entities: "Secure data models and validation"
    features: "Secure business logic"
    widgets: "Secure component composition"
    pages: "Secure route handlers"
  priority: "Security overrides other architectural considerations"

# FLAGGED PATTERNS
anti_patterns:
  - "dangerouslySetInnerHTML with user input"
  - "innerHTML = userInput"
  - "String concatenation in SQL"
  - "Client-side only auth"
  - "Hardcoded credentials"
  - "Logging passwords"
  - "Stack traces in production"
  - "User-controlled file paths"
  - "Missing security headers"
  - "Permissive CORS"
  - "Sensitive data in localStorage"
  - "eval() with user input"

# CORRECT PATTERNS
secure_examples: |
  // XSS Prevention
  import DOMPurify from 'dompurify';
  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(userInput)}} />
  
  // SQL Injection Prevention
  db.query('SELECT * FROM users WHERE id = ?', [userId]);
  
  // Secure Authentication
  const hasPermission = await verifyPermissionOnServer(userId, action);
  
  // Environment Variables
  const API_KEY = process.env.API_KEY;
  
  // Secure Error Handling
  const isDev = process.env.NODE_ENV === 'development';
  return res.status(500).json({ 
    error: isDev ? error.message : 'Internal server error' 
  });

# DETECTION PATTERNS
flagged_regex:
  - "dangerouslySetInnerHTML.*userInput"
  - "innerHTML.*=.*userInput"
  - "eval\\("
  - "new Function\\("
  - "localStorage.setItem.*password"
  - "console.log.*password"
  - "SELECT.*\\+.*user"
  - "WHERE.*\\$\\{.*\\}"
  - "document.write\\("
  - "setTimeout\\(.*string.*\\)"

# SUGGESTED SOLUTIONS
solutions:
  - "Use DOMPurify.sanitize() for HTML"
  - "Use parameterized queries"
  - "Server-side auth checks"
  - "Environment variables for secrets"
  - "Never log sensitive data"
  - "Proper error handling"
  - "Validate/sanitize inputs"
  - "Secure httpOnly cookies"
  - "Security headers with helmet.js"
  - "Restrictive CORS policies"

# EXCEPTIONS
rule_exceptions:
  - "Development error logging (with conditions)"
  - "Non-sensitive localStorage data"
  - "Properly sanitized HTML with DOMPurify"
  - "Server-side parameterized queries"
  - "Secure auth flows with validation"
  - "Environment-specific configs with guards"
