# === feature-slice-baseline.yaml ===
id: feature-slice-baseline
description: "Enforces required baseline files and directories for each feature slice under app/features/"
globs:
  - "app/features/**/*"
always_apply: false

# REQUIRED STRUCTURE
required_baseline_files:
  description: "Each feature slice `app/features/<feature>/` MUST contain:"
  files:
    - "`api.ts` — Backend interactions and data fetching"
    - "`api.spec.ts` — Unit tests for API functions"
    - "`hooks.ts` — React hooks specific to feature"
    - "`hooks.spec.ts` — Unit tests for hooks"
    - "`ui/` — UI components directory"
    - "`ui/<ComponentName>.tsx` — Main business component"
    - "`ui/<ComponentName>.spec.ts` — Component tests"
    - "`README.md` — Feature documentation"

# FEATURE CONTENT RULES
content_rules:
  should_contain:
    description: "Features should contain reusable business functionality:"
    items:
      - "Forms (LoginForm, TaskForm, UserProfileForm)"
      - "Cards (TaskCard, UserCard, ProductCard)"
      - "Modals (ConfirmationModal, EditModal)"
      - "Business hooks (useAuth, useTaskManagement)"
      - "API interactions (loginUser, createTask, updateProfile)"

  should_not_contain:
    description: "Features are business logic, NOT pages:"
    prohibited:
      - "`ui/<feature>.page.tsx` — Pages belong in app/pages/"
      - "Full page layouts or routing logic"
      - "Application-level concerns"

# ENFORCEMENT RULES
enforcement:
  process:
    - "Check for missing baseline files before changes"
    - "If files missing, immediately prompt to create them"
    - "Do not proceed until baseline structure complete"
  
  missing_file_response:
    template: "Create missing file <path> with appropriate business component template."

# EXAMPLES
correct_structures:
  user_authentication: |
    ✅ app/features/user-authentication/
    ├── api.ts                    # Auth API calls
    ├── api.spec.ts
    ├── hooks.ts                  # useAuth, useLogin hooks
    ├── hooks.spec.ts
    ├── ui/
    │   ├── LoginForm.tsx         # Reusable login form
    │   ├── LoginForm.spec.tsx
    │   ├── SignupForm.tsx        # Reusable signup form
    │   └── SignupForm.spec.tsx
    └── README.md

  task_management: |
    ✅ app/features/task-management/
    ├── api.ts                    # Task CRUD operations
    ├── api.spec.ts
    ├── hooks.ts                  # useTaskManagement hooks
    ├── hooks.spec.ts
    ├── ui/
    │   ├── TaskCard.tsx          # Reusable task display
    │   ├── TaskCard.spec.tsx
    │   ├── TaskForm.tsx          # Reusable task form
    │   └── TaskForm.spec.tsx
    └── README.md

incorrect_example:
  page_in_feature: |
    ❌ app/features/dashboard/
    ├── ui/
    │   └── dashboard.page.tsx    # Pages belong in app/pages/

# NAMING RULES
naming_conventions:
  principle: "Component names should reflect business purpose, not page names"
  examples:
    user_management_feature:
      correct: ["`ui/UserForm.tsx`", "`ui/UserCard.tsx`", "`ui/UserList.tsx`"]
      incorrect: "`ui/user-management.page.tsx`"

# FSD INTEGRATION
fsd_principles:
  - "Each feature = reusable business capability"
  - "Features imported by pages and widgets for composition"
  - "Features focus on business logic, not presentation layout"
  - "Page composition happens in pages layer"

architecture_flow: |
  app/pages/dashboard/ui/index.tsx     ← Composes widgets and features
      ↓ imports
  app/widgets/user-dashboard/          ← Composes multiple features  
      ↓ imports
  app/features/user-management/        ← Provides UserCard, UserForm
  app/features/task-management/        ← Provides TaskCard, TaskList

# FLAGGED PATTERNS
anti_patterns:
  - "Feature slices missing required baseline files"
  - "Feature directories without api.ts file"
  - "Feature directories without hooks.ts file"
  - "Missing test files for API functions"
  - "Missing test files for hooks"
  - "Feature directories without ui/ directory"
  - "Missing main component in ui/ directory"
  - "Feature directories without README.md"
  - "Incomplete feature slice structure"

# CORRECT PATTERN TEMPLATE
baseline_template: |
  **Complete Feature Slice Structure:**
  app/features/<feature-name>/
  ├── api.ts                    # Backend interactions
  ├── api.spec.ts              # API unit tests
  ├── hooks.ts                 # React hooks
  ├── hooks.spec.ts            # Hooks unit tests
  ├── ui/                      # UI components directory
  │   ├── <ComponentName>.tsx  # Main business component
  │   ├── <ComponentName>.spec.ts # Component tests
  │   └── [other-components].tsx   # Additional components
  └── README.md                # Feature documentation

  **File Content Requirements:**
  - api.ts: Backend interactions and data fetching
  - hooks.ts: React hooks specific to feature
  - ui/<Component>.tsx: Main business component
  - README.md: Feature documentation and API info

# DETECTION PATTERNS
flagged_file_patterns:
  - "Feature directories in app/features/ missing api.ts"
  - "Feature directories in app/features/ missing hooks.ts"
  - "Feature directories in app/features/ missing ui/ directory"
  - "Feature directories in app/features/ missing README.md"
  - "Missing .spec.ts files for api.ts"
  - "Missing .spec.ts files for hooks.ts"
  - "Missing main component in ui/ directory"
  - "Missing component tests in ui/ directory"
  - "Incomplete baseline structure in feature slices"

# SUGGESTED SOLUTIONS
solutions:
  - "Create missing api.ts with backend interaction template"
  - "Create missing hooks.ts with React hooks template"
  - "Create missing ui/ directory for components"
  - "Create missing README.md with feature documentation template"
  - "Add api.spec.ts with unit tests for API functions"
  - "Add hooks.spec.ts with unit tests for hooks"
  - "Add main business component in ui/ directory"
  - "Add component tests for ui/ components"
  - "Use templates from scripts/templates/feature_README.md"

# EXCEPTIONS
rule_exceptions:
  - "Work-in-progress features (temporary)"
  - "Legacy features during migration (temporary)"
  - "Features not requiring all baseline files (rare)"
  - "Experimental features in development (temporary)"
  - "Third-party feature integrations with different structure"
