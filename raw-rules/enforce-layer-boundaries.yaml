# === enforce-layer-boundaries.yaml ===
id: enforce-layer-boundaries
description: "Prevents direct cross-imports between segments within FSD feature slices, with automatic violation detection"
globs:
  - "app/features/**/ui/**/*.tsx"
  - "app/features/**/ui/**/*.ts"
  - "app/features/**/api.ts"
  - "app/features/**/hooks.ts"
always_apply: true

# 🚨 AUTO-DETECTION PATTERNS
critical_violations:
  description: "These patterns trigger mandatory validation workflow:"
  patterns:
    - "import.*from.*'~/widgets/.*' in app/features/"
    - "import.*from.*'~/features/.*' in app/entities/"
    - "import.*from.*'~/pages/.*' in app/widgets/"
    - "import { loginUser, fetchUserProfile } from '../api' in UI files"
    - "import.*Service.*from.*in UI components"
    - "import.*Client.*from.*in UI components"

  violation_handling:
    - "STOP execution immediately"
    - "Use critical-workflow-checks validation format"
    - "Present architectural alternatives"
    - "Wait for user decision"

# PROHIBITED PATTERNS
prohibited_imports:
  ui_importing_api_hooks:
    bad_example: |
      // ❌ BAD - Direct API import in UI
      import { loginUser, fetchUserProfile } from '../api';
      import { useAuthState } from '../hooks';
      
      function LoginForm() {
        const handleSubmit = async (data) => {
          await loginUser(data); // Direct API call from UI
        };
      }

  api_hooks_importing_ui:
    bad_example: |
      // ❌ BAD - UI import in API
      import { showNotification } from './ui/Notification';
      
      export const loginUser = async (credentials) => {
        const result = await api.login(credentials);
        showNotification('Login successful'); // UI dependency in API
        return result;
      };

# REQUIRED ARCHITECTURE PATTERN
layer_hierarchy:
  ui_components_should_only_import:
    - "Other UI components from same feature"
    - "Hooks from same feature (public API)"
    - "Entities, shared utilities, external libraries"

  api_files_should_contain:
    - "Backend interaction logic"
    - "Data transformation"
    - "Type definitions"
    - "External API calls"

  hooks_files_should:
    - "Combine API calls with React state management"
    - "Provide public interface for feature"
    - "Abstract away implementation details"

# CORRECT IMPLEMENTATION
correct_examples:
  ui_using_hook_api: |
    // ✅ CORRECT - UI using public hook API
    import { useAuth } from '../hooks';
    import { Button } from '~/shared/ui/Button';

    function LoginForm() {
      const { login, isLoading, error } = useAuth(); // Public API

      const handleSubmit = async (data) => {
        await login(data); // Using abstracted hook method
      };

      return (
        <form onSubmit={handleSubmit}>
          {error && <div className="error">{error}</div>}
          <Button type="submit" disabled={isLoading}>
            {isLoading ? 'Logging in...' : 'Login'}
          </Button>
        </form>
      );
    }

  hook_orchestrating_api: |
    // ✅ CORRECT - Hook orchestrating API calls
    import { useState } from 'react';
    import { loginUser, fetchUserProfile, logoutUser } from './api'; // Hook uses API

    export const useAuth = () => {
      const [user, setUser] = useState(null);
      const [isLoading, setIsLoading] = useState(false);
      const [error, setError] = useState(null);

      const login = async (credentials) => {
        setIsLoading(true);
        setError(null);
        try {
          const result = await loginUser(credentials); // Using API layer
          const profile = await fetchUserProfile(result.userId);
          setUser(profile);
        } catch (err) {
          setError(err.message || 'Login failed');
        } finally {
          setIsLoading(false);
        }
      };

      return { user, login, logout, isLoading, error };
    };

  clean_api_layer: |
    // ✅ CORRECT - Clean API layer
    import { apiClient } from '~/shared/api/client';

    export const loginUser = async (credentials) => {
      const response = await apiClient.post('/auth/login', credentials);
      return response.data;
    };

    export const fetchUserProfile = async (userId) => {
      const response = await apiClient.get(`/users/${userId}`);
      return response.data;
    };

# ERROR MESSAGES
error_templates:
  ui_importing_api: |
    ❌ UI component should not directly import from API layer
    Replace: import { loginUser } from '../api'
    With: const { login } = useAuth() // Use public hook API

  api_importing_ui: |
    ❌ API layer should not import UI components
    Remove: import { showNotification } from './ui/Notification'
    Solution: Return status/error data, let UI handle presentation

  hooks_importing_ui: |
    ❌ Hooks should not import UI components
    Remove: import { Modal } from './ui/Modal'
    Solution: Return modal state, let UI handle rendering

# ALLOWED EXCEPTIONS
allowed_imports:
  within_same_segment:
    - "UI components importing other UI components"
    - "API functions importing other API functions"

  correct_hierarchy:
    - "Hooks importing from API: `import { loginUser } from './api'` ✅"
    - "UI importing from Hooks: `import { useAuth } from '../hooks'` ✅"

  external_dependencies:
    - "Any segment importing from shared, entities, or external libraries ✅"

# IMPLEMENTATION GUIDE
fix_violations:
  steps:
    - "Move API calls from UI components to hooks"
    - "Move UI logic from API/hooks to UI components"
    - "Create proper abstractions in hooks layer"
    - "Create public hook APIs that combine API + state"
    - "Keep UI focused on presentation only"
    - "Keep API focused on data fetching only"

# FLAGGED PATTERNS
anti_patterns:
  - "Direct API imports in UI components"
  - "UI component imports in API files"
  - "UI component imports in hooks files"
  - "Direct database calls from UI components"
  - "Business logic in UI components"
  - "Presentation logic in API files"
  - "Cross-segment imports within feature slice"
  - "Bypassing hooks abstraction layer"

# CORRECT APPROACH
architecture_pattern: |
  **Layer Hierarchy (UI → Hooks → API):**
  
  // UI Layer (Presentation only)
  import { useAuth } from '../hooks'; // ✅ Use public hook API
  
  function LoginForm() {
    const { login, isLoading, error } = useAuth();
    // Only presentation logic here
  }

  // Hooks Layer (Orchestration)
  import { loginUser } from './api'; // ✅ Hook uses API
  
  export const useAuth = () => {
    // Combine API calls with state management
    // Provide public interface for UI
  };

  // API Layer (Data only)
  export const loginUser = async (credentials) => {
    // Only backend interaction logic
    // No UI dependencies
  };

  **Dependency Flow:**
  UI depends on Hooks (public API)
  Hooks depend on API (data layer)  
  API depends on external services/shared utilities
  No reverse dependencies allowed

# DETECTION PATTERNS
flagged_regex:
  - "import.*from.*'\\.\\.?/api'" # UI importing from API
  - "import.*from.*'\\.\\.?/ui/'" # API/Hooks importing from UI
  - "import.*from.*'\\.\\.?/hooks'" # API importing from hooks
  - "Direct API calls in UI components"
  - "UI component usage in API/hooks files"

# SUGGESTED SOLUTIONS
solutions:
  - "Move API calls from UI to hooks layer"
  - "Create public hook APIs abstracting implementation"
  - "Use hooks as orchestration layer between UI and API"
  - "Keep UI focused on presentation only"
  - "Keep API focused on data fetching only"
  - "Return data/state from hooks, let UI handle presentation"
  - "Create clean interfaces between layers"

# EXCEPTIONS
rule_exceptions:
  - "Imports within same segment (UI to UI, API to API)"
  - "Hooks importing from API (correct hierarchy)"
  - "UI importing from hooks public API (correct hierarchy)"
  - "Imports from shared utilities or entities"
  - "External library imports"
  - "Type-only imports without runtime dependencies"
  - "Legacy code during migration (temporary)"
