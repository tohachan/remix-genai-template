# === task-approach-optimized.yaml ===
id: task-approach
description: "Systematic approach for handling user requests with mandatory architectural validation"
globs: []
always_apply: true

# Mandatory validation checkpoint
mandatory_validation_checkpoint:
  description: "üö® BEFORE ANY CODE ACTION: Execute architectural validation"
  validation_source: "critical-workflow-checks.yaml -> mandatory_pre_execution_validation"
  validation_process:
    - "Parse user request for architectural implications"
    - "Run architectural_validation_checklist"
    - "Check conflict_detection_triggers"
    - "If conflicts found ‚Üí Use required_conflict_response_format"
    - "If no conflicts ‚Üí Proceed with file_clarification_requirement"

# File clarification requirements
file_clarification_requirement:
  always_clarify_file_references: |
    When files/components mentioned without explicit paths:
    
    **‚ùå Never assume** which files the user is referring to
    **‚úÖ Always ask for clarification:**
    
    ```
    I need to clarify which files you're referring to. Are you talking about:
    - [List specific file paths/options]
    - Or different files entirely?
    
    Please specify exact file paths or provide more context.
    ```

# README analysis requirements  
readme_analysis_requirement:
  mandatory_readme_study: "Before making changes, **always** read relevant README files"
  readme_location_patterns:
    - "`app/features/{feature}/README.md`"
    - "`app/widgets/{widget}/README.md`"
    - "`app/entities/{entity}/README.md`"
    - "`app/pages/{page}/README.md`"

# Strict scope adherence
strict_scope_adherence:
  never_do:
    - "‚ùå Never add improvements/enhancements not requested"
    - "‚ùå Never suggest additional features unless asked"
    - "‚ùå Never optimize code unless optimization requested"
  always_do:
    - "‚úÖ Implement exactly what user asked for"
    - "‚úÖ Stay focused on specific requirements"

# File editing error handling
file_editing_error_handling:
  search_replace_failed:
    - "Re-read file around target area"
    - "Check for whitespace differences"
    - "Try smaller, more specific string"
    - "Consider string may have already changed"
  what_not_to_do:
    - "Do NOT use `sed` commands"
    - "Do NOT attempt line-by-line reconstruction"
    - "Do NOT use terminal commands for character editing"
  escalation_process: |
    I'm having trouble with exact text replacement. Please manually replace:
    [exact current text]
    With:
    [exact new text]

# Conflict resolution requirement
conflict_resolution_requirement:
  always_report_inconsistencies:
    - "Conflicting instructions within request"
    - "Ambiguous/contradictory specifications"
    - "Missing critical information"
    - "Conflicts between coding rules"
    - "Inconsistencies with FSD architecture"
  
  required_response_pattern: |
    I've identified an inconsistency/conflict:
    
    **Issue**: [Describe specific conflict]
    **Details**: [Explain what's conflicting]
    **Options**: [List possible approaches]
    
    How would you like me to proceed?

# Mandatory slice baseline verification
mandatory_slice_baseline_verification:
  description: "üö® BEFORE STARTING ANY SLICE WORK:"
  step_0_baseline_check:
    requirement: "MUST perform baseline check before development"
    steps:
      - "Identify target slice and layer from user request"
      - "Run baseline verification using checklist:"
      - "  - Features: api.ts, api.spec.ts, hooks.ts, hooks.spec.ts, ui/, README.md, index.ts"
      - "  - Pages: ui/index.tsx, ui/index.spec.tsx, README.md, index.ts, route file"
      - "  - Widgets: ui/, tests, README.md, index.ts"
      - "  - Entities: model/, README.md, index.ts"
      - "If ANY baseline file missing ‚Üí auto-create using generators"
      - "No user confirmation needed - auto-create immediately"

# Step-by-step execution
step_by_step_execution:
  simple_tasks_format: |
    **Execution Plan:**
    
    STEP 0: üö® MANDATORY BASELINE VERIFICATION
    - Target slice: app/[layer]/[slice]/
    - Baseline check: [checklist type]
    - Missing files: [list or "All present ‚úÖ"]
    - Action: [Create missing files or "Complete ‚úÖ"]
    
    1. [Description] - Generator: [Yes/No - which one]
    2. [Description] - Generator: [Yes/No - which one]
    3. [Description] - Manual: [Only if no generator]
    
    FINAL VALIDATION:
    - npm run lint:fix
    - npm run type-check (zero tolerance)
    - npm run test
    - Baseline re-verification

  complex_tasks_format: |
    # Task: [Description]
    
    ## STEP 0: üö® BASELINE VERIFICATION
    - [ ] Target slice: app/[layer]/[slice]/
    - [ ] Baseline checklist: [type]
    - [ ] Missing files: [list or "None ‚úÖ"]
    - [ ] Files created using generators
    
    ## Steps:
    - [ ] Step 1: [Description] - Generator: [which one]
    - [ ] Step 2: [Description] - Generator: [which one]
    
    ## Final Validation:
    - [ ] npm run lint:fix
    - [ ] npm run type-check (ALL errors fixed)
    - [ ] npm run test
    - [ ] Baseline re-verification ‚úÖ

# Enhanced validation workflow
enhanced_validation_workflow:
  required_steps:
    lint_auto_fix:
      command: "npm run lint:fix"
      purpose: "Auto-fix violations, report remaining issues, ensure FSD compliance"
    
    typescript_check:
      command: "npm run type-check"
      purpose: "Validate all types, MUST fix ALL errors, ensure type safety"
    
    testing:
      command: "npm run test"
      purpose: "Verify functionality, ensure no regression, validate components"
    
    manual_verification:
      - "Test feature in browser"
      - "Verify user interactions"
      - "Check responsive design if applicable"

  error_handling:
    linting_errors:
      - "Read error messages carefully"
      - "Fix violations that couldn't be auto-fixed"
      - "Do NOT suppress warnings without justification"
    
    typescript_errors:
      - "Fix ALL type errors - zero tolerance"
      - "Do NOT use @ts-ignore or any as shortcuts"
      - "Create proper interfaces for complex types"
    
    test_failures:
      - "Investigate and fix root cause"
      - "Do NOT skip or comment out tests"
      - "Update tests only if requirements changed"

# Anti-patterns
anti_patterns:
  - "Making assumptions about file references"
  - "Skipping README analysis"
  - "Adding unrequested improvements"
  - "Complex workarounds for simple failures"
  - "Not reporting conflicts"
  - "Proceeding without execution plan"
  - "Manual creation without generator checks"
  - "Skipped validation steps"
  - "Unresolved TypeScript errors"

# Correct pattern
correct_pattern: |
  **Process flow:**
  1. Architectural validation checkpoint
  2. File clarification if needed
  3. README analysis for affected entities
  4. Mandatory baseline verification (Step 0)
  5. Execution plan with generator checks
  6. Step-by-step implementation
  7. Complete validation workflow
  8. Baseline re-verification

# Enforcement - no exceptions
enforcement_no_exceptions:
  never_allowed:
    - "Skip Step 0 baseline verification"
    - "Proceed without checking baseline files"
    - "Ignore missing README.md files"
    - "Ask confirmation before creating baseline files"
  
  must_always:
    - "Run baseline verification first"
    - "Auto-create missing baseline files using generators"
    - "Re-verify baseline completion after changes"
    - "Fix ALL TypeScript errors"

# Solutions
suggested_solutions:
  - "Ask for clarification on ambiguous references"
  - "Read README files before changes"
  - "Stick to requested scope"
  - "Use systematic approach for failures"
  - "Report conflicts and ask guidance"
  - "Create execution plans with generator checks"
  - "Use CLI generators for supported types"
  - "Follow complete validation workflow"

# Exceptions
exceptions:
  - "Emergency fixes requiring immediate action"
  - "Clear requests with explicit file paths"
  - "Tasks explicitly requesting scope expansion"
  - "Legacy code that cannot use generators"
