# === require-ts-strict-optimized.yaml ===
id: require-ts-strict
description: "Ensures TypeScript strict mode is configured in tsconfig.json for type safety"
globs:
  - "tsconfig.json"
  - "tsconfig.*.json"
always_apply: false

# Required compiler options
required_compiler_options:
  core_strict_mode:
    option: "`\"strict\": true` â€” Enable all strict type checking options"

  individual_strict_options:
    note: "Automatically enabled by strict: true, can be explicitly set:"
    options:
      - "`\"noImplicitAny\": true`"
      - "`\"strictNullChecks\": true`"
      - "`\"strictFunctionTypes\": true`"
      - "`\"strictBindCallApply\": true`"
      - "`\"strictPropertyInitialization\": true`"
      - "`\"noImplicitReturns\": true`"
      - "`\"noImplicitThis\": true`"

  additional_recommended:
    options:
      - "`\"noUncheckedIndexedAccess\": true`"
      - "`\"exactOptionalPropertyTypes\": true`"
      - "`\"noImplicitOverride\": true`"

# Configuration examples
configuration_examples:
  minimal_required: |
    {
      "compilerOptions": {
        "strict": true
      }
    }

  explicit_configuration: |
    {
      "compilerOptions": {
        "strict": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "strictFunctionTypes": true,
        "strictBindCallApply": true,
        "strictPropertyInitialization": true,
        "noImplicitReturns": true,
        "noImplicitThis": true,
        "noUncheckedIndexedAccess": true,
        "exactOptionalPropertyTypes": true,
        "noImplicitOverride": true
      }
    }

  gradual_adoption: |
    {
      "compilerOptions": {
        "strict": true,
        // Temporarily disable during migration
        "strictPropertyInitialization": false,
        "noImplicitReturns": false
      }
    }

# Enforcement rules
enforcement_rules:
  - "Always verify `\"strict\": true` is present in `compilerOptions`"
  - "If missing, prompt to update `tsconfig.json`"
  - "Check for conflicting settings (strict options set to false)"
  - "Validate inheritance - ensure parent configs don't disable strict mode"

# Error resolution
error_resolution:
  steps:
    - "Add `\"strict\": true` to `compilerOptions`"
    - "Review existing code for new type errors"
    - "Update code to fix type issues"
    - "Consider gradual adoption by temporarily disabling specific options"

# Anti-patterns
anti_patterns:
  - "Missing strict: true in compilerOptions"
  - "Strict options explicitly set to false when strict: true enabled"
  - "Missing recommended strict options"
  - "Conflicting strict mode settings"
  - "Parent configurations disabling strict mode"

# Correct pattern
correct_pattern: |
  **Required configuration:**
  ```json
  {
    "compilerOptions": {
      "strict": true,
      "noUncheckedIndexedAccess": true,
      "exactOptionalPropertyTypes": true,
      "noImplicitOverride": true
    }
  }
  ```

# Flagged patterns
flagged_patterns:
  - "missing \"strict\": true"
  - "strict options set to false"
  - "missing recommended strict options"
  - "conflicting strict mode settings"

# Solutions
suggested_solutions:
  - "Add \"strict\": true to compilerOptions"
  - "Remove conflicting settings that disable strict options"
  - "Add recommended additional strict options"
  - "Review and fix newly detected type errors"
  - "Consider gradual adoption for legacy codebases"
  - "Update parent configurations to enable strict mode"

# Exceptions
exceptions:
  - "Gradual adoption by temporarily disabling specific strict options"
  - "Legacy code with planned migration to strict mode"
  - "Third-party configurations with different requirements"
  - "Test configurations with relaxed type checking"
